================  Automated system SHUTDOWN and other ================

 This programmer reference describes SYSCNTL REXX exec that
 is included to this file and made for it's title.
 This exec helps automate the system shutdown routine by
 executing your instructions written in form of simplified
 REXX program. Your code can interact with the system
 using console commands and interpreting the responses.

 Your code must be written in REXX and can use
 some convenient functions built in SYSCNTL. This means
 you can customize the shutdown routine as you like - from
 step-by-step confirmation process to a complete
 "seat back and relax".

 Another use of this exec is to run it to check the status
 of some critical tasks (CICS regions, databases, etc),
 and alarm operator if something is wrong, for example,
 if some task is not active, or does not respond, or
 response indicates the wrong options are active.
 Your rexx code gets the responses to any console commands
 and can interpret the response content as you like.

 SYSCNTL exec is executed by CHKTASK started task (SYS1.COMMON.PROCLIB)
        Components involved:
        1) CHKTASK - JCL proc for authorised started task
        2) SYSCNTL - REXX program base code
        3) User Routine REXX code that is defined as REXXPARM DD
           and is executed as a part of SYSCNTL.
        4) External modules and functions (see the list below).

 Directions:
        1) This program must be called by an authorised
           JCL proc. The proc must be authorized in RACF to issue
           all console commands (Modify, Stop, Cancel, Reply)
           and CICS console conmmands.
        2) Usually you do not modify this program unless you want to
           add/change task processing in the STOP/CHECK subroutines.
           System specific shutdown sequence code is kept in a
           separate PDS member defined as a REXXPARM DD statement.
           Currently see members in SYS1.UTILITY.EXEC.
           Member name is &OPTION.&SYSNAME
           &OPTION = function name, &SYSNAME = partition name.
           Example: SHUTPROD, CHKPROD, SHUTTEST.
           This code will be included and executed as a part of
           SYSCNTL. Must be written in REXX,
           some restrictions apply.
        3) The function code can use subroutines included below
           and/or available REXX builtin functions.
           This program uses functions included to IRXFLOC pack
           originally coming from CBT file 386.
           Some functions were modified and others added to the pack.
           IRXFLOC load module must be placed in a load library and
           that must be defined as a STEPLIB or JOBLIB.
           See existing code as an examples for PROD and TEST.
        4) Stop sequences for known tasks are defined in STOP
           subroutine inside SYSCNTL.
           To add a new stop task code, if it is not just
           "P taskname", that is a default,
           someone must add a "WHEN task=" segment to STOP subroutine
           that defines console command(s) to stop the task.
        5) Check sequence for known tasks are defined in CHECK
           subroutine below.
           To add a check for a new task, if it is not just search
           the task in the active task list (that is default),
           one must add a "WHEN task =" segment to CHECK subroutine.
        6) To reply outstanding console requests use REPLYIT.
           REPLYIT uses the value of "#request" variable
           that must be set by the following REXX command:
              Parse #CONS('D R,L,CN=MASTER') With #rc #request
           before calling REPLYIT.
           REPLYIT can work in two alternative ways:
           1) Use IRX@MGCR external program that must run authorised.
           This means it must be placed to
           a LINKLIST library and included to the AUTHPGM list
           in IKJTSO00 member in SYS1.**.PARMLIB.
           2) If first method is not available, uncomment job
           submit statements in REPLYIT to start a batch job
           that would execute REPLY commands.

 PARM = 'system,parm' will be parsed and available for your code
        as variables "#system" and "#parm". Parm is optional.

 Externals:
        Load: L_WTO, L_DOM, L_FWT, IRX@MGCR
        Exec: INSD, PWX, SYSGETL, SYSACTV
