=======================  REXX functions ==============================

This programmer reference decribes REXX functions that are
included into a user added functions package IRXFLOC.
All the functions are available for any job and do not
require any STEPLIB or JOBLIB.

----------------------------------------------------------------------
DSN4DDN

FUNCTION:     Check if DD is allocated to a dataset.
              Search TIOT DD entries for DDNAME specified as a
              parm. If DD entry is not found, return null.
              If DD entry is found, get JFCB and return JFCBDSN
              (See also L_DDN function for more return)

Sample use:   dsn = DSN4DDN('SYSUT1')
              If dsn <> '' Then /* DD found - process */
              Else Say 'SYSUT1 - ddname missing'

PARAMETERS:   ddname

OUTPUT:       R15 = 0
              dsname, if ddname is allocated
              null,   if ddname is not allocated to a dataset

ATTRIBUTES:   REENTRANT, AMODE=31, RMODE=ANY

----------------------------------------------------------------------
L_FWT (alias FWAIT kept for compatibility)

FUNCTION:     1) Enable modify operator commands
              2) Set interval and wait until either interval expires
                 or stop/modify command issued
              3) If modify/stop was requested, return 'STOP'
                 or command, if interval has expired, return null.

Sample use:
              /* Set program to wait for modify: */
                 reply = FWAIT()
              /* Set program to wait for either modify or timer: */
                 reply = FWAIT(interval)

              If no parameter, just wait for modify.
              Parameter format: xxxxm or xxxxs
                 xxxx - decimal number, 1-4 digits,
                 m - interval in minutes (upper/lower case)
                 s - interval in seconds (upper/lower case)

PARAMETERS:   interval

OUTPUT:       R15 = non-zero, if parm is invalid
              returns string to REXX program:
                 if interval has expired, reply = ''
                 if stop/modify, reply = 'STOP' or command text

ATTRIBUTES:   Reentrant, Amode=31, Rmode=Any

----------------------------------------------------------------------
L_ALC

FUNCTION:     Same as
              "TSO ALLOC DA('"dsn"') FI('"ddn"') VOLUME('"vol"') SHR"
              Can be used outside TSO environment.

SAMPLE USE:   dsn = 'MY.DATA.SET(MEMBER)'
              or    'SOME.GDGBASE(+0)' - existing GDG dataset
              If L_ALC(ddname,dsname)
              Then Do
                 /* process ddname */
                 Call L_FRE(ddanme)
              End
              Else Say 'Error opening data set'

Parameters:   ddn,dsn,vol
              ddn - required, specifies to what ddname allocate
                    the dataset.
              dsn - required, full dataset name to be allocated.
                    Can include PDS member name.
                    No apostrophes allowed.
                    No HLQ will be added to the dsn.
              vol - optional. If omitted, will locate by a catalog.
              Dataset will be allocated with DISP=SHR.

Return:       If error: R15=0,
                   Say error/warning message,
                   result = '0' datatset was not allocated
              If allocated,
                   result = '1' normal execution response

Attributes:   Reus, reentrant, AMODE=31,RMODE=ANY

Externals:    SVMALC6 (used by LOAD and CALL)

----------------------------------------------------------------------
L_FRE

FUNCTION:     Same as
              "TSO FREE FI('"ddn"')
              Can be used outside TSO environment.

SAMPLE USE:   dsn = 'MY.DATA.SET(MEMBER)'
              If L_ALC(ddname,dsname)
              Then Do
                 /* process ddname */
                 Call L_FRE(ddanme)
              End
              Else Say 'Error opening data set'

Parameters:   ddn
              ddn - required, specifies what ddname to FREE

Return:       If error:
                   Say error/warning message,
                   R15>0 - "Incorrect call to procedure"
                   result = '0' datatset was not freed
              If freed,
                   result = '1' normal execution response

Attributes:   Reus, reentrant, AMODE=31,RMODE=ANY

Externals:    SVMALC6 (used by LOAD and CALL)

----------------------------------------------------------------------
L_DDN

FUNCTION:     Create a limited number of LISTDSI variables and two
              additional: SYSUTYPE and SYSMEMBER:
              - SYSUTYPE='DISL'/'TAPE'/'COMM'/DISPL'/'OTHER'
              - SYSMEMBER=member name if DD is allocated to PDS member.
              - SYSRACFA is assigned RACF access available for the
                owner of the job/task executing this function.
              LISTDSI variables supported are (alphabetical):
                SYSADIRBLK
                SYSBLKSIZE
                SYSCREATE
                SYSDDNAME
                SYSDSNAME
                SYSDSORG
                SYSEXDATE
                SYSEXTENTS
                SYSKEYLEN
                SYSLRECL
                SYSMEMBERS
                SYSPASSWORD
                SYSPRIMARY
                SYSRACFA - see comment above
                SYSRECFM
                SYSREFDATE
                SYSSECONDS
                SYSUDIRBLK
                SYSUNIT
                SYSUNITS
                SYSUPDATED
                SYSVOLUME
              Dataset can be allocated on disk, tape, vio, gdg.
              Currently does not calculate SYSUSED.
              Variables that have no data will be cleared to null,
              except SYSDDNAME that will be dropped
              (See TSO/E REXX Reference. TSO/E External functions
              for other variables names assigned by LISTDSI only).
              Works outside TSO environment (i.e. under IRXJCL).
     Warning: Gives correct SYSPRIMARY for dasd with 15 TRK per CYL
              only. See SVM0033 source for details.
              When SYSUNITS is 'BLOCK', gives numbers in TRKs.

Sample use:   If L_DDN('SYSUT1') Then
                 /* use returned variables */

PARAMETERS:   ddname
          or  DDNAME+n    n - number in DD concatenation

OUTPUT:       R15 = 0
              Result = 1 - normal end
              Result = 0 (all vars cleared), Say message:
                 - no parm
                 - ddname not found

ATTRIBUTES:   REENTRANT, AMODE=31, RMODE=ANY

EXTERNALS:    SVM0033 - shared with IRXF@DSN common module
                        that sets up REXX variables

----------------------------------------------------------------------
L_DOM

FUNCTION:     Delete message from operator console
                 identified by parm=msgid

Sample use:   msgid = L_WTO(message,'b')
              ...
              call L_DOM(msgid) /* remove message */

PARAMETERS:   msgid - returned by L_WTO function

OUTPUT:       R15 = 0
              '1' - normal execution response
              '0' - no parm or rc<>0 from DOM

ATTRIBUTES:   REENTRANT, AMODE=31, RMODE=ANY

----------------------------------------------------------------------
L_DSN

FUNCTION:     Create a limited number of LISTDSI variables and two more.
              See L_DDN for a full list and description.
              Dsname is located by catalog.
              Dataset can be allocated on disk, tape, vio, gdg.
              Variables that have no data will be cleared to null.
              except SYSDDNAME that will be dropped.
              Works outside TSO environment (i.e. under IRXJCL).

Sample use:   If L_DSN(dsname) Then
                 /* use returned variables */

PARAMETERS:   dsname

OUTPUT:       R15 = 0
              Result = 1 - normal end
              Result = 0 (all vars cleared), say message
                 - no parm
                 - dsname not located, but assigned to SYSDSNAME
        Note: For GDG(+1) result will be 0 (new gdg not yet created)
              but in this case SYSDSNAME will reflect the name of
              GDG dataset that would be created for this relative #.
              You can use "TSO ALLOC DA('"SYSDSNAME"')..." to
              allocate a new GDG, that you could not with
              "TSO ALLOC DA('"dsname(+1)"')...

ATTRIBUTES:   REENTRANT, AMODE=31, RMODE=ANY

EXTERNALS:    SVM0033 - shared with IRXF@DDN common module
                        that sets up REXX variables
              SVM0030 - return UNIT for Volume

----------------------------------------------------------------------
L_PDS

FUNCTION:     Open PO dataset,
              Allocate member list table
              Read PO dataset and fill member list
              Adjust EVSIZE and copy members to EVDATA.
              If member has aliases, put them in 'ALIAS()'
              after the primary member name.
              Use blanks to separate primary members,
              Use comma to separate aliases.

Sample use:   dsn='...'; memlist=L_PDS(dsn)

PARAMETERS:   dsn,vol
              dsn  - required
              vol  - optional or blanks

OUTPUT:       Result - string of members and aliases
              If Error - R15>0 ("Incorrect call to procedure")
              - no parm,
              - no $OPEN program
              - no dataset
              - too many members
              If warning - R15=0, result=null
              - not a PDS
              - no members
              Say error/warning message.

ATTRIBUTES:   REENTRANT, AMODE=31, RMODE=ANY

----------------------------------------------------------------------
L_SRT

FUNCTION:     Sort data records in STACK,
              Returns sorted records to the STACK

Sample use:   If L_SORT("SORT FIELDS=(5,4,CH,A)","M")
                   ...
                   Notes:
                   1) start of the field to sort must be
                      set to n+4, i.e. col #1 is FIELDS=(5,...
                   2) 'M' means put SORT messages to SYSOUT,
                      other value or omitted - no SYSOUT produced.

OUTPUT:       If Error - "Incorrect call to procedure" (R15>0)
                   - no or empty parm
                   - RC>0 from SORT (bad parm)
              If OK,
                   result = '1' normal execution response

ATTRIBUTES:   REENTRANT, AMODE=31, RMODE=ANY

----------------------------------------------------------------------
L_WTO

FUNCTION:     Issue message to operator console
              Wait and return reply
                 or return msgid for DOM or return '1'

Sample use:   msgid = L_WTO(msg,type,sup)
              msg - message text, if omitted or empty,
                    nothing will be done
              type - optional message type:
                 default - regular (green) scrollable message
                 'B' or 'b' - white message held on the console
                              until this job ends.
                 'A' or 'a' - red message held on the console
                              until removed.
                 'R' or 'r' - get a response from operator
              sup - optional authorised execution flag
                 default - run not authorised
                 'S' or 's' - attempt MODESET to supervisor state
                 (sup option is not used/tested in this package)

OUTPUT:       R15 = 0
              '0' - if no/null msg parm passed (no action)
               or if WTO/WTOR failed
              '1' - normal execution response for no type
              msgid - normal execution for type = 'B' or 'A'
              reply - normal execution for type = 'R'

ATTRIBUTES:   REENTRANT, AMODE=31, RMODE=ANY
---------------------------------------------------------------------
L_PGM

FUNCTION:     Open Load library member and read ESD,RLD,SYM data
              (if any) to the arrays that will be available to
              the caller exec.
              Creates (if not already exist) a hidden variable
              value(dsname) that contains library data used for
              faster re-open. This variable will exist until
              the exec ends and is re-usable. Contains DSN,
              MEMBER, VOLUME, DCB addr, BUFFER addr and size.
              See $PARM map for field description.
              Overlay and SCTR programs not supported.
Sample use:
  //SVMRFC  JOB ...                                                            0
  //* Map IRXF@PGM which was intentionally asmlinkked with TEST option:
  //STEP1   EXEC PGM=IRXJCL,
  //        PARM='MAPPGM hlq.TEST.L,IRXF@PGM,N'
  //* To get program data put library and program name to parm above
  //* Append option ,N to include details (from SYM and RLD records)
  //SYSEXEC  DD DSN=hlq.TEST.EXEC,DISP=SHR          <== hlq.EXEC
  //STEPLIB  DD DSN=hlq.TEST.L,DISP=SHR             <== IRXFLOC lib
  //SYSTSPRT DD  SYSOUT=*
  //SYSTSIN  DD  DUMMY
  //SYSUDUMP DD SYSOUT=*
  //ABNLIGNR DD DUMMY
  //
    see MAPPGM exec for details

PARAMETERS:   dsn,program,volume
              dsn     - required, must be a load library name
              program - required, member name
              volume  - optional, can be omitted, blanks or null

OUTPUT:       Result ='1' - normal, '0' - abnormal
              R15 = 0
              Say message:
              - no dsname specified
              - no member specified
              - $OPEN program cannot be LOADed
              - no dataset, member, not a PDS, or open error
              - RAM shortage

              Created REXX variables:
              PTAB - string mapped by the following structure:
              - p#name   CL8 main program name
              - p#entry  F   entry point offset
              - p#size   F   program size, bytes
              -          X   reserved
              - p#ssi    XL3 ssi (date of linkage: dddddF)
              - p#ac     BL1 program authorization code
              - p#at1    BL1 copy of PDS2ATR1 (ref IHAPDS)
              - p#at2    BL1 copy of PDS2ATR2 (ref IHAPDS)
              - p#ft2    BL1 copy of PDS2FTB2 (ref IHAPDS),
                             bit0 = PDS2ALIS (alias flag)
              - p#aname  CL8 alias name (if member is an alias)
              - p#aentry F   alias entry point offset
              CTAB.i (i=1,2,...) - section data
              - c#name   CL8 CSECT/EP name
              - c#addr   F   section offset in the program
              - c#size   F   section size, bytes
              - c#type   X   type 00-SD,03-LR,04-PC,05-Common
              - c#ssi    XL3 section compilation date

              These variables will be created, if program has SYM
              records (Assembled and linked with option TEST):
              DTAB.i (j=1,2,...) - DSECT data
              - d#name   CL8 section name
              - d#addr   F   zeroes
              - d#size   F   section size, bytes
              - d#type   X   type
              - d#num    AL3 number of parent CTAB (i)
              CTAB.i.n (i=1,2,..., n=1,2,...) - csect field data
              - n#name   CL8 field name
              - n#addr   F   field offset in section
              - n#size   F   field length, bytes
              - n#type   X   field type
              - n#mult   AL3 filed multiplier (20CL8 20=mult,8=size)
              DTAB.j.n (j=1,2,..., n=1,2,...) - dsect field data
              - n#name   CL8 field name
              - n#addr   F   field offset in section
              - n#size   F   field length, bytes
              - n#type   X   field type
              - n#mult   AL3 filed multiplier (20CL8 20=mult,8=size)

Attributes:
              reentrant, AMODE=31,RMODE=ANY
Externals:
              $OPEN - dynalloc/read interface module (A=24)
                           LOADed and CALLed
---------------------------------------------------------------------
