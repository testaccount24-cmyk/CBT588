//jobname JOB (account),userid,CLASS=S,MSGCLASS=Y,REGION=4M
//*
//* First modify JOB card and data set names to your environment
//* Assemble and Link program/module
//*
//ASMH EXEC PGM=ASMA90,REGION=4M,
// PARM='RENT,OBJECT,NODECK,NOXREF,BATCH'
//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB
//         DD DISP=SHR,DSN=SYS3.UTILITY.MACLIB.TEST      <== hlq.MACLIB
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200
//SYSIN    DD *
*---------------------------------------------------------------------
     TITLE 'DSN4DDN  REXX function DSN4DDN'
*---------------------------------------------------------------------
* History of Changes (last comes first):
*
* 02-24-2003 SVM Fixed SWAREQ call -> LOSEPAX=YES
* 03-06-2003 SVM Changed to RMODE=ANY
* 09-20-2002 SVM Created
*.....................................................................
*
* FUNCTION:     Check if DD is allocated to a dataset.
*               Search TIOT DD entries for DDNAME specified as a
*               parm. If DD entry is not found, return null.
*               If DD entry is found, get JFCB and return JFCBDSN
*               (See also L_DDN function for more return)
*
* Sample use:   dsn = DSN4DDN('SYSUT1')
*               If dsn <> '' Then /* DD found - process */
*               Else Say 'SYSUT1 - ddname missing'
*
* PARAMETERS:   ddname
*
* OUTPUT:       R15 = 0
*               dsname, if ddname is allocated
*               null,   if ddname is not allocated to a dataset
*
* ATTRIBUTES:   REENTRANT, AMODE=31, RMODE=ANY
*---------------------------------------------------------------------
         EJECT
*---------------------------------------------------------------------
DSN4DDN  BEGIN A=31,R=31
WRK      WORK  LV=WRKL,LOC=BELOW
         B     START
*
EXIT     SR    R15,R15
         FIN
*--------------------
* REGISTER EQUATES:
* R9  -> EVALBLOCK result block
* R10 -> IRXEFPL   parm block
* R11 -> ENVBLOCK  environment block
*- Set REXX environment:
START    DS    0H
         LR    R10,R1                  IRXEFPL
         USING EFPL,R10                - parm list
         LR    R11,R0                  ENVBLOCK
         USING ENVBLOCK,R11            - externals
         L     R9,EFPLEVAL
         L     R9,0(R9)                EVALBLOCK
         USING EVALBLOCK,R9            - result
* get parm #1 (DDNAME)
         LA    R2,1                    Ask for parm #1
         BAL   R14,GETPARM             R3=addr,R4=length (0=not found)
         LTR   R4,R4
         BZ    EMPTY
         BCTR  R4,0                    length - 1
         MVC   DDNAME,=8C' '
         EX    R4,MVCDDN               copy parm to DDNAME
*- locate 1st TIOT DD-entry
         L     R15,CVTPTR
         USING CVT,R15
         L     R15,CVTTCBP
         L     R15,PSATOLD-PSATNEW(R15)
         USING TCB,R15
         L     R15,TCBTIO
         USING TIOT1,R15
         LA    R15,TIOENTRY           1st DD-entry
         ST    R15,TIOE1              save it
         DROP  R15
*- search for DDNAME in TIOT DD entries:
         L     R4,TIOE1
DDLOOP   SR    R7,R7
         IC    R7,0(R4)                 DDentry length
         LTR   R7,R7                    If = 0
         BZ    EMPTY                    Not found
         CLC   DDNAME,4(R4)
         BE    FOUND                    does match
NEXTDD   LA    R4,0(R7,R4)              Advance to next TIOT DD entry
         B     DDLOOP
*
*- Match found: locate JFCB using SWAREQ:
FOUND    DS    0H
         LA    R5,EPA                  GET ADDRESS OF THE EPA
         ST    R5,SWEPAPTR             INITIALIZE EPA POINTER
         USING ZB505,R5                ESTABLISH ADDRESSABILITY TO EPA
         XC    SWAEPAX,SWAEPAX         INITIALIZE THE EPA
         MVC   SWVA,12(R4)             MV SVA OF JFCB INTO EPA
         SWAREQ FCODE=RL,EPA=SWEPAPTR,MF=(E,SWAPARMS),UNAUTH=YES
         L    R6,SWBLKPTR              POINT TO THE JFCB
         USING JFCB,R6                 ADDRESS JFCB
         MVC   DSNAME(44),JFCBDSNM     save dsn
         B     RETDSN                  Leave
*
         DROP  R6
         DROP  R5
*
*---------------------------------------------------------------------*
* Return parameter as a result:                                       *
*    (std length of EVDATA is 250 bytes, to replace EVALBLOCK,        *
*    call IRXRLT and put new address into EFLEVAL)                    *
*---------------------------------------------------------------------*
*
EMPTY    SR    R4,R4
         ST    R4,EVALBLOCK_EVLEN      Store Result length
         B     EXIT
*
RETDSN   DS    0H
         LA    R4,DSNAME+1             2nd char
         LA    R2,1                    increment
         LA    R3,DSNAME+L'DSNAME-1    Last char
LOOP     CLI   0(R4),C' '
         BE    CUT
         BXLE  R4,R2,LOOP
* R4-> blank or next char after DSN
CUT      LA    R2,DSNAME+1
         SR    R4,R2                   length(DSN) - 1
         EX    R4,MVCDSN               Move parm text to result
         LA    R4,1(R4)                length(DSN)
         ST    R4,EVALBLOCK_EVLEN      Store Result length
         B     EXIT
*---------------------------------------------------------------------*
*        S U B R O U T I N E S                                        *
*---------------------------------------------------------------------*
* GET input parameter (addr,length) by number:                        *
*    entry :  R2=parm # (not changed)                                 *
*    use   :  R15 (return 0, when parm is found)                      *
*    return:  to R14, R3=parm addr, R4=parm length (0, if not found)  *
*---------------------------------------------------------------------*
GETPARM  DS    0H
         LR    R15,R2
         SR    R4,R4                   make length zero
         L     R3,EFPLARG              A(1st parm)
         B     GETPL1                  go into loop
GETPL    LA    R3,8(R3)                next parm
GETPL1   CLC   0(8,R3),PARMEND
         BER   R14                     not found
         BCT   R15,GETPL
* parm found:
         L     R4,4(R3)                parm length
         L     R3,0(R3)                parm addr
         BR    R14
*=====================================================================*
*        CONSTANTS                                                    *
*---------------------------------------------------------------------*
         DS    0F
PARMEND  DC    8X'FF'
SWAPARMC SWAREQ MF=L,FCODE=RL
LSWA     EQU   *-SWAPARMC
MVCDDN   MVC   DDNAME(0),0(R3)              move parm to DDNAME
MVCDSN   MVC   EVALBLOCK_EVDATA(0),DSNAME   move DSNAME to return buf
         LTORG
         EJECT
*---------------------------------------------------------------------*
*        LOCAL WORK AREA                                              *
*---------------------------------------------------------------------*
         SPACE 1
WRK      DSECT
WRKSAVE  DS    18F                     REGISTER SAVE AREA
TIOE1    DS F
SWEPAPTR DS F
DSNAME   DS    CL44
DDNAME   DS    CL8
SWAPARMS SWAREQ MF=L
EPA      DS    CL28                    Appears to use 26 bytes...
WRKL     EQU   (*-WRK+7)/8*8           WORK AREA LENGTH, words
         EJECT
*---------------------------------------------------------------------*
*        DSECTS                                                       *
*---------------------------------------------------------------------*
         PRINT NOGEN
         REGS
* REXX specific DSECTs:
         IRXEFPL DSECT=YES             REXX parameter list
         IRXEVALB                      REXX evaluation block EVALBLOCK
         IRXEXTE                       REXX vector of external ep
         IRXENVB                       REXX environment block ENVBLOCK
* SYSTEM SPECIFIC DSECTS:
         CVT DSECT=YES
         IEFJESCT
         PRINT GEN
         IEFZB505 LOCEPAX=YES
TIOT     DSECT
         IEFTIOT1
         PRINT NOGEN
         IKJTCB  DSECT=YES
         IHAPSA
JFCB     DSECT
         IEFJFCBN
         END
//*
//LKED    EXEC PGM=HEWLKED,PARM='CALL,MAP,RENT,AC=1,RMOD=ANY,AMOD=31',
//        COND=(8,LE)
//SYSLIB   DD DISP=SHR,DSN=SYS3.UTILITY.LOADLIB.TEST
//SYSLMOD  DD DISP=SHR,DSN=SYS3.UTILITY.LOADLIB.TEST(DSN4DDN) <==*.LOAD
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD DSN=*.ASMH.SYSLIN,DISP=(OLD,PASS)
//*
//* test changes, if any:
//GO      EXEC PGM=IRXJCL,COND=(8,LE),
//        PARM='PW'
//SYSEXEC  DD DSN=SYS3.UTILITY.EXEC.SHARE,DISP=SHR         <== hlq.EXEC
//STEPLIB  DD DSN=SYS3.UTILITY.LOADLIB.TEST,DISP=SHR       <== hlq.LOAD
//SYSTSPRT DD  SYSOUT=*
//SYSTSIN  DD  DUMMY
//SYSUDUMP DD SYSOUT=*
//ABNLIGNR DD DUMMY                                  <== Disable CW AA
//TEMPL    DD *
 Say 'DSN4DDN('TEMPL')='||DSN4DDN('TEMPL')
 Say 'DSN4DDN('MISSING')='||DSN4DDN('MISSING')
 Say "DSN4DDN('')="||DSN4DDN('')
 Say 'DSN4DDN()='||DSN4DDN()
 EXIT
