//jobname JOB (account),userid,CLASS=S,MSGCLASS=Y,REGION=4M
//*
//* First modify JOB card and data set names to your environment
//* Assemble and Link program IRX@MGCR
//*
//ASMH EXEC PGM=ASMA90,REGION=4M,
// PARM='RENT,OBJECT,NODECK,NOXREF,BATCH'
//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB
//         DD DISP=SHR,DSN=SYS1.MODGEN
//         DD DISP=SHR,DSN=SYS3.UTILITY.MACLIB.TEST      <== hlq.MACLIB
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200
//SYSIN    DD *
*---------------------------------------------------------------------
     TITLE 'IRXF@WTO REXX function L_WTO'
*---------------------------------------------------------------------
* History of Changes (last comes first):
*
* 05-02-2003 SVM     Fixed WTOR to be reentrant
* 12-18-2002 SVM Created using CTB file 386 IRXF@WTO (L_WTO)
*                    Changes:
*                    - ignore 3rd parm if not authorized
*                    - add RED message option (2nd parm = 'A')
*                    - ignore if 1st parm (message) is empty
*                    - support lower/upper case in parm 2 and 3
*.....................................................................
*
* FUNCTION:     Issue message to operator console
*               Wait and return reply
*                  or return msgid for DOM or return '1'
*
* Sample use:   msgid = L_WTO(msg,type,'s')
*               msg - message text, if omitted or empty,
*                     nothing will be done
*               type - optional message type:
*                  default - regular (green) scrollable message
*                  'B' or 'b' - white message sticking on the console
*                               until this job ends.
*                  'A' or 'a' - red message sticking on the console
*                               until removed.
*                  'R' or 'r' - get a response from operator
*               sup - optional authorised execution flag
*                  default - run not authorised
*                  'S' or 's' - attempt MODESET to supervisor state
*                  (sup option is not used/tested in this package)
*
* Return:     R15 = 0
*             '0' - if no/null msg parm passed (no action)
*              or if WTO/WTOR failed
*             '1' - normal execution response for no type
*             msgid - normal execution for type = 'B' or 'A'
*             reply - normal execution for type = 'R'
*
* Attributes: REENTRANT, AMODE=31, RMODE=ANY
*--------------------------------------------------------------------
WRK      DSECT
         DS    18F
TXTLEN   DS    H
TYPE     DS    C
SUPS     DS    C
AUTHST   DS    F
* command buffer for WTO:
         DS    0F
WTORX    DS    A                   A(REPLY) + VL
         DS    A                   A(ECBREPLY)
WTOCMD   DS    H                   AL2(L'WTOTXT+4) (WTO)
*                                  AL1(L'REPLY),AL1(L'WTOTXT+4) (WTOR)
WTOCMD2  DS    H                   DESC codes
WTOTXT   DC    CL122' '            text area
DSCODES  DS    XL2                 DESC code
RTCODES  DS    XL2                 Rout code
*
REPLY    DS    CL119
ECBREPLY DS    F
WRKL     EQU   (*-WRK+7)/8*8           WORK AREA LENGTH, words
         REGS
*--------------------------------------------------------------------
IRXF@WTO BEGIN A=31
WRK      WORK  LV=WRKL
         B     START
*
FIN      SR    R15,R15                 always 0
         FIN
*--------------------------------------------------------------------
START    LR    R2,R1                   IRXEFPL
         USING EFPL,R2                 - parm list
* not    LR    R11,R0                  ENVBLOCK
* used   USING ENVBLOCK,R11            - externals
         L     R3,EFPLARG
         L     R4,EFPLEVAL
         USING ARGTABLE_ENTRY,R3
         L     R4,0(R4)                EVALBLOCK
         USING EVALBLOCK,R4            - result
         MVI   TYPE,C'N'
         MVI   SUPS,C'N'
* Set response = 1 (as a default)
         MVI   EVALBLOCK_EVDATA,C'1'   return 1
         LA    R9,1
         ST    R9,EVALBLOCK_EVLEN
*--------------------------------------------------------------------
* Read parameter 1 (message), if no - do nothing
*--------------------------------------------------------------------
         L     R5,ARGTABLE_ARGSTRING_PTR
         LTR   R5,R5
         BM    ERROR                   no parm passed
         L     R6,ARGTABLE_ARGSTRING_LENGTH
         LTR   R6,R6
         BZ    ERROR                   null parm passed
         C     R6,F122
         BNH   MOVTWK
         LA    R6,122                  truncate if too long
MOVTWK   STH   R6,TXTLEN               save text length
         BCTR  R6,R0
         EX    R6,MOVWT                copy text
         LA    R6,5(R6)                length + 4
         STH   R6,WTOCMD               clear flags1 and store length
         MVC   WTOCMD+2(2),#MCSFLGS    copy MCS flags
*--------------------------------------------------------------------
* Read parameter 2 (type) N-green, R-WTOR, B-white, A-red (alarm)
*--------------------------------------------------------------------
         LA    R3,ARGTABLE_NEXT
         L     R5,ARGTABLE_ARGSTRING_PTR
         LTR   R5,R5
         BM    EXECUTE
         L     R6,ARGTABLE_ARGSTRING_LENGTH
         LTR   R6,R6
         BZ    RP3
         MVI   TYPE,C'R'
         CLI   0(R5),C'R'
         BE    RP3
         CLI   0(R5),C'r'
         BE    RP3
         MVI   TYPE,C'B'
         CLI   0(R5),C'B'
         BE    RP3
         CLI   0(R5),C'b'
         BE    RP3
         MVI   TYPE,C'A'
         CLI   0(R5),C'A'
         BE    RP3
         CLI   0(R5),C'a'
         BE    RP3
         MVI   TYPE,C'N'               default
*--------------------------------------------------------------------
* Read parameter 3 (S - if APF, set supervisor state)
*--------------------------------------------------------------------
RP3      LA    R3,ARGTABLE_NEXT
         L     R5,ARGTABLE_ARGSTRING_PTR
         LTR   R5,R5
         BM    EXECUTE
         L     R6,ARGTABLE_ARGSTRING_LENGTH
         LTR   R6,R6
         BZ    EXECUTE                 null parm passed
         MVI   SUPS,C'S'
         CLI   0(R5),C'S'
         BE    EXECUTE
         CLI   0(R5),C's'
         BE    EXECUTE
         MVI   SUPS,C'N'               default
*--------------------------------------------------------------------
* EXECUTE requested command:
*--------------------------------------------------------------------
EXECUTE  CLI   SUPS,C'S'
         BNE   EXECUT2
         TESTAUTH FCTN=1               Check
         ST    R15,AUTHST              (save)
         LTR   R15,R15                 if auth
         BNZ   EXECUT2                 you are not authorized...
         MODESET KEY=ZERO,MODE=SUP     set supervisor state
EXECUT2  LA    R1,WTOTXT               txt length
         AH    R1,TXTLEN
         MVC   2(2,R1),#RTCODES        copy rout codes
         CLI   TYPE,C'N'
         BE    HWTO                    green
         CLI   TYPE,C'R'
         BE    HWTOR                   WTOR
         CLI   TYPE,C'A'
         BE    HWTOA
*--------------------------------------------------------------------
* Issue sticked message:
*--------------------------------------------------------------------
HWTOB    MVC   0(2,R1),#DSCODEW        Make it white  it white
         B     HWTO0
*                                                     it RED
HWTOA    MVC   0(2,R1),#DSCODER        Make it red
HWTO0    SR    R0,R0
         LA    R1,WTOCMD
         SVC   35
         LTR   R15,R15
         BNZ   EXIT0                   WTO failed
         ST    R1,EVALBLOCK_EVDATA     return msgid for DOM
         LA    R9,4
         ST    R9,EVALBLOCK_EVLEN
         B     EXIT                    Normal exit
*--------------------------------------------------------------------
* Issue WTOR
*--------------------------------------------------------------------
HWTOR    XC    ECBREPLY,ECBREPLY            clear ECBREPLY
         MVI   REPLY,C' '
         MVC   REPLY+1(L'REPLY-1),REPLY     clear REPLY
         LA    R1,REPLY
         ST    R1,WTORX                     store REPLY addr
         OI    WTORX,X'80'                  and set VL bit
         LA    R1,ECBREPLY
         ST    R1,WTORX+4                   store ECB addr
         LA    R1,L'REPLY
         STC   R1,WTORX+8                   store reply length
*        MVC   WTOCMD2(2),#ZEROCOD          reset desc codes
         SR    R0,R0
         WTOR  MF=(E,WTORX)
         LTR   R15,R15
         BNZ   EXIT0                   WTOR failed
         WAIT  ECB=ECBREPLY
         MVC   EVALBLOCK_EVDATA(119),REPLY
         LA    R9,119
         LA    R5,EVALBLOCK_EVDATA+118
STRIPT   CLI   0(R5),C' '
         BNE   SETL
         BCTR  R5,R0
         BCT   R9,STRIPT
SETL     LTR   R9,R9
         BNZ   SETL2
         LA    R9,1
SETL2    ST    R9,EVALBLOCK_EVLEN       return reply text
         B     EXIT                     normal exit
*--------------------------------------------------------------------
* Issue green WTO:
*--------------------------------------------------------------------
HWTO     MVC   0(2,R1),#DSCODEG        Make it green
         SR    R0,R0
         LA    R1,WTOCMD
         SVC   35
         LTR   R15,R15
         BNZ   EXIT0
*--------------------------------------------------------------------
* EXIT:
*--------------------------------------------------------------------
* Normal exit:
EXIT     CLI   SUPS,C'S'
         BNE   FIN
         L     R15,AUTHST              Check
         LTR   R15,R15                 if auth
         BNZ   FIN                     you are not authorized
         MODESET KEY=NZERO,MODE=PROB   remove supervisor state
         B     FIN
*
* Error exit:
EXIT0    CLI   SUPS,C'S'
         BNE   ERROR
         L     R15,AUTHST              Check
         LTR   R15,R15                 if auth
         BNZ   ERROR
         MODESET KEY=NZERO,MODE=PROB   remove supervisor state
* Set Response to '0':
ERROR    MVI   EVALBLOCK_EVDATA,C'0'   return 1
         LA    R9,1
         ST    R9,EVALBLOCK_EVLEN
         B     FIN
*--------------------------------------------------------------------
MOVWT    MVC   WTOTXT(0),0(R5)
F122     DC    F'122'
#ZEROCOD DC    X'0000'                  DESC CODE for WTOR
#MCSFLGS DC    B'1000000000000000'
#DSCODEW DC    B'0100000000000000'      DESCRIPTOR CODE 2 (wht,rmv)
#RTCODES DC    B'0000000000000000'      Routcde
#DSCODER DC    B'0000000000100000'      DESCRIPTOR CODE 11 (red,stay)
#DSCODEG DC    B'0010000000000000'      DESCRIPTOR CODE   (green,rmv)
         LTORG
*--------------------------------------------------------------------
* Mapping:
*--------------------------------------------------------------------
D        DSECT
         IRXEFPL
         IRXARGTB
         IRXEVALB
         END   IRXF@WTO
//*
//LKED    EXEC PGM=HEWLKED,PARM='RENT,CALL,MAP,AC=1,RMOD=ANY,AMOD=31',
//        COND=(8,LE)
//SYSLMOD  DD DISP=SHR,DSN=SYS3.UTILITY.LOADLIB.TEST(IRXF@WTO) <=*.LOAD
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD DSN=*.ASMH.SYSLIN,DISP=(OLD,PASS)
//*
//* test changes, if any:
//*O      EXEC PGM=IKJEFT1B,COND=(8,LE),
//*       PARM='%PW'
//GO      EXEC PGM=IRXJCL,COND=(8,LE),
//        PARM='PW'
//SYSEXEC  DD DISP=SHR,DSN=SYS3.UTILITY.EXEC.SHARE         <== hlq.EXEC
//STEPLIB  DD DISP=SHR,DSN=SYS3.UTILITY.LOADLIB.TEST       <== hlq.LOAD
//SYSTSPRT DD  SYSOUT=*
//SYSTSIN  DD  DUMMY
//SYSUDUMP DD SYSOUT=*
//TEMPL    DD *
 x = IRXF@WTO('Red Test message-ignore','A','S')
 Say 'Red Message,   response from IRXF@WTO (hex) =' C2X(x)
 call FWAIT(3s)
 x = L_DOM(x)
 Say 'RC from L_DOM =' x
 x = IRXF@WTO('White Test message-ignore','B')
 Say 'White Message, response from IRXF@WTO (hex) =' C2X(x)
 call FWAIT(3s)
 x = L_DOM(x)
 Say 'RC from L_DOM =' x
 x = IRXF@WTO('Green Test message-ignore')
 Say 'Green Message, response from IRXF@WTO =' x
 call FWAIT(3s)
 x = IRXF@WTO('Reply "U"','R')
 Say 'Reply =' x
 x = IRXF@WTO('','a')
 Say 'Null Message,  response from IRXF@WTO (hex) =' x
 x = IRXF@WTO()
 Say 'No parm,       response from IRXF@WTO (hex) =' x
 EXIT
//
