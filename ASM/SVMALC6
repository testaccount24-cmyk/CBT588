//jobname JOB (account),userid,CLASS=S,MSGCLASS=Y,REGION=4M
//*
//* First modify JOB card and data set names to your environment
//* Assemble and Link program/module
//*
//ASMH    EXEC PGM=ASMA90,REGION=4M,
//         PARM='RENT,OBJECT,NODECK,NOXREF,BATCH'
//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB
//         DD  DISP=SHR,DSN=SYS3.UTILITY.MACLIB.TEST     <== hlq.MACLIB
//SYSUT1   DD  UNIT=VIO,SPACE=(CYL,2)
//SYSPRINT DD  SYSOUT=*
//SYSLIN   DD  UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200
//SYSIN    DD  *
*=====================================================================
     TITLE 'SVM0006: DYNALLOC interface'
*---------------------------------------------------------------------
* History of Changes (last comes first):
*
* 05-15-2003 SVM Added allocation of existing GDG: dsn=MY.GDG(0/-1/..)
* 03-13-2003 SVM Fixed SNAP operations to be reenrant
* 03-03-2003 SVM Updated to alloc for a given DDNAME (if any)
*                    and optional dsn(member)
* 01-17-2002 SVM Updated to BEGIN-WORK-FIN
* 10-24-2001 SVM Created
*.....................................................................
*
* FUNCTION:
*               1) Converts Parm to SVC 99 data structure.
*               2) Invokes SVC 99 for Dynalloc/Unalloc.
*               3) If Dynalloc then returns DDNAME and DSORG in Parm.
*               4) Returns RC from SVC 99 to caller in R15.
*               5) Linkedited to $OPEN interface program
*               Note: Does not set "Permanent Alloc" X'0052' attribute
*
* PARM (SVMPAR6 DSECT):
*               R1 = Addr of the following data structure:
*               TDDN     ><CL8  Dynalloc-in/out, Unalloc-input
*               TDSORG    <XL2  Dynalloc-output, Unalloc-n/a
*               TDSN     > CL54 Dynalloc-input,  Unalloc-n/a
*                          can include optional pds member:
*                          'dsname(member)'
*               TVOL     ><CL6  Dynalloc-in/out, Unalloc-n/a
*               TERR      <XL4  Both-Copy of S99ERROR and S99INFO
* OUTPUT:
*               R15 > 0 - parm error or dynalloc error
* ENTRY POINTS:
*               SVMALC6 - Dynalloc
*               SVMDEL6 - Unalloc
* ATTRIBUTES:
*               REENTRANT, AMODE=24
*---------------------------------------------------------------------
         EJECT
*---------------------------------------------------------------------
SVMALC6  BEGIN A=24,R=24
         SR    R7,R7                   Indicate ALLOCATE
         B     COMMON                  Goto Common continuation
         ENTRY SVMDEL6
E1OFFST  EQU   *-SVMALC6
SVMDEL6  SAVE  (14,12)                 Save registers
         LA    R7,4                    Indicate DELETE
         LA    R3,E1OFFST              Set Entry Offset
         LR    R12,R15                 ->SVMDEL6
         SR    R12,R3                  Set Base to SVMALC6
*=====================================================================
* Common Continuation                  Prolog Section
COMMON   DS    0H
WA       WORK  LV=WALEN,LOC=BELOW
         LA    R10,0(R1)
         USING SVMPAR6,R10             Address Parameter
*---------------------------------------------------------------------
* Fill in the Data structure for SVC 99:
         LA    R4,WRB                  Addr of S99RB
         USING S99RB,R4                Set Base for S99RB
* Make Parm address list:
         ST    R4,WRBPTR               Set S99RB addr in RBPTR
         OI    WRBPTR,S99RBPND         Set VL bit in RBPTR
* Make S99RB:
         XC    S99RB(RBLEN),S99RB      Clear RB
         MVI   S99RBLN,RBLEN           Set the Length of RB
         MVI   S99VERB,S99VRBAL        Set Verb Code = ALLOC
         LA    R5,WRBX                 Addr of S99RBX
         ST    R5,S99S99X              Set Addr of RBX in RB
         LA    R5,WTUP1                Addr of TU Pointer List
         ST    R5,S99TXTPP             Set Addr of TUP list in RB
* Make S99RBX to produce WTO warnings for User:
         LA    R5,WRBX                 Addr of RBX
         USING S99RBX,R5               Set Base for S99RBX
         XC    S99RBX(RBXLEN),S99RBX   Clear S99RBX entirely
         MVC   S99EID(6),EID           Set EID (C'S99RBX')
         MVI   S99EVER,S99RBXVR        Set Version
         OI    S99EOPTS,S99EIMSG       Set Flag to Put Messages
         OI    S99EOPTS,S99EWTP        Set Flag to WTO Messages
         OI    S99FLAG1,S99NOMNT       Set Flag1 to no mount
         OI    S99FLAG1,S99GDGNT       Set Flag1 to always Locate GDG
*    Uncomment the one you need:
*        MVI   S99EMGSV,S99XINFO       Set Msg Level Info
         MVI   S99EMGSV,S99XWARN       Set Msg Level Warning
*        MVI   S99EMGSV,S99XSEVE       Set Msg Level Sever Error
*---------------------------------------------------------------------
* Switch to Continue depending on Entry point requested function
         LA    R1,SWITCH1
         B     0(R7,R1)                Switch by Entry
SWITCH1  B     DYN1                    - Dynalloc
         B     DEL1                    - Unalloc
*---------------------------------------------------------------------
* Make Text Unit Pointer List for Dynalloc:
DYN1     DS    0H
* Check for dsn(member):
         MVI   DSN,C' '
         MVC   DSN+1(43),DSN           clear DSN
         MVC   MEMBER(8),#BLANKS       clear MEMBER
         LA    R3,TDSN                 first char of tdsn
         LA    R1,TDSN+L'TDSN-1        last char of tdsn
         LA    R2,1
         LNR   R2,R2                   step = -1
LOOP1    CLI   0(R1),C')'              search backward for ')'
         BE    FOUND1
         BXH   R1,R2,LOOP1
         B     NOMEM1
* R1-> ')'
FOUND1   ST    R1,SECOND
LOOP2    CLI   0(R1),C'('              search backward for '('
         BE    FOUND2
         BXH   R1,R2,LOOP2
         B     ERRORPAR
* R1-> '('  Check if it is member name or GDG:
FOUND2   CLI   1(R1),C'+'
         BE    PRCGDG
         CLI   1(R1),C'-'
         BE    PRCGDG
         CLI   1(R1),C'0'
         BL    PRCMEM
         CLI   1(R1),C'9'
         BH    PRCMEM
* Process GDG: LOCATE the real DSN
PRCGDG   MVC   DSN(44),TDSN
         LA    R1,DSN                  Build CAMLST1 parms:
         ST    R1,CAMLST1+4
         LA    R1,LOCAREA
         ST    R1,CAMLST1+12
         SR    R1,R1
         ST    R1,CAMLST1
         ST    R1,CAMLST1+8
         IC    R1,=AL1(68)
         STC   R1,CAMLST1              Indicate 'CAMLST NAME'
*
         LOCATE CAMLST1                Reset DSN to real name
         LTR   R15,R15                 (e.g. A.B.G0012V00)
         BNZ   ERRORPAR
         B     DYN12
*
PRCMEM   LR    R2,R1
         SR    R2,R3
         BCTR  R2,0                    dsn length - 1 for MVC
         EX    R2,MOVDSN               copy dsn
         LA    R1,1(R1)                Next to '('
         L     R2,SECOND
         SR    R2,R1                   member len
         BCTR  R2,0                    member len-1 for MVC
         EX    R2,MOVMEMB              copy member name
         B     DYN12
NOMEM1   DS    0H
         MVC   DSN(44),TDSN            copy
DYN12    DS    0H
*---------------------------------------------------------------------
* Make text unit pointer list for Dynalloc:
*        WTO   'SVMALC6: Create Allocation...'
         LA    R6,WTUDSN               Addr of 1-st TU
         ST    R6,WTUP1                Set the 1-st TU ptr
         LA    R6,WTUSTS               Addr of 2-nd TU
         ST    R6,WTUP2                Set the 2-nd TU ptr
         LA    R6,WTUDDN               Addr of 3-rd TU
         ST    R6,WTUP3                Set the 3-rd TU ptr
         LA    R6,WTUORG               Addr of 4-th TU
         ST    R6,WTUP4                Set the 4-th TU ptr
         LA    R6,WTUVOL               Addr of 5-th TU
         ST    R6,WTUP5                Set the 5-th TU ptr
         LA    R6,WTUMEM               Addr of 6-th TU
         ST    R6,WTUP6                Set the 6-th TU PTR
         OI    WTUP6,S99TUPLN          Set VL bit in 6-th TU ptr
         CLI   MEMBER,C' '             Member present ?
         BNE   WITHMEM                 yes
         OI    WTUP5,S99TUPLN          Set VL bit in 5-th TU ptr
WITHMEM  DS    0H
* Copy Data to Text Units:
         MVC   WTUDSN(DSNLEN),DSNTU    Set to DSNAME Template
         MVC   WDSN(44),DSN            Copy DSN from Parm
         MVC   WTUMEM(MEMLEN),MEMTU    Set to MEMBER Template
         MVC   WMEM(8),MEMBER          Copy MEMBER
         MVC   WTUSTS(STSLEN),STSTU    Set to DISP Template
         MVC   WTUDDN(DDNLEN),RETDDN   Set to Return DDNAME Template
         CLC   TDDN(8),=8C' '          If PARM.DDN is blank
         BE    DYN11                   Y- skip
         MVC   WTUDDN(2),DALDDN        N - Reset key to Input DDNAME
         MVC   WDDN(8),TDDN            and Copy DDN from Parm
DYN11    MVC   WTUORG(ORGLEN),RTORG    Set to Return DSORG Template
         MVC   WTUVOL(VOLLEN),RTVOL    Set to Return VOLSER Template
         CLC   TVOL(6),=6C' '          If PARM.VOL is blank
         BE    CONTINUE                Y- skip
         MVC   WTUVOL(2),DALVOL        N - Reset key to Input Volume
         MVC   WVOL(6),TVOL            and Copy VOL from Parm
         B     CONTINUE                Common Continuation
*---------------------------------------------------------------------
* Re-Set RB and Text Units for Unallocate:
DEL1     DS    0H
*        WTO   'SVMALC6: Delete Allocation...'
         MVI   S99VERB,S99VRBUN        RB: Set Verb Code = UNALLOCATE
         LA    R6,WTUDDN               Addr of 1-st TU
         MVC   WTUDDN(DDNLEN),RETDDN   Set to Return DDNAME Template
         MVC   WTUDDN(2),DALDDN        Reset DDNAME Key to Input
         MVC   WDDN(8),TDDN            Copy DDNAME from Parm
         L     R5,S99TXTPP             Load Addr of TUP list from RB
         ST    R6,0(,R5)               Set the 1-st TU ptr
         OI    0(R5),S99TUPLN          Set VL bit for last TU ptr
         B     CONTINUE
*=====================================================================
* Call DYNALLOC:
CONTINUE LA    R1,WRBPTR               Put Addr of RBPTR in Reg 1
*
         DYNALLOC                      Invoke DYNALLOC
*
         MVC   TERR(4),S99ERROR        Copy S99ERROR & S99INFO to Parm
         LR    R2,R15
         LTR   R15,R15                 Check RC
         BZ    DONE                    OK
*---------------------------------------------------------------------
ERROR    DS    0H
*        WTO   'SVMALC6: Dynalloc Error (RC>0), see SNAP'
* Output SNAP dump for debug:
         MVC   SNAPDCB(#SNAPDCL),#SNAPDCB
         MVC   SNAPC(#SNAPCL),#SNAPC
         LA    R1,SNAPDCB
         ST    R1,SNAPDAD
         MVI   SNAPDAD,X'8F'           INDICATE OPEN FOR OUTPUT
         LA    R1,SNAPDAD
         SVC   19                      OPEN
*        OPEN  (SNAPDCB,OUTPUT)
         LA    R2,SNAPDCB
         SNAP  DCB=(R2),MF=(E,SNAPC)   ID=245,PDATA=ALL
         LA    R1,SNAPDAD
         MVI   0(R1),X'80'
         SVC   20                      CLOSE
*        CLOSE SNAPDCB
         LA    R15,ERRCODE
         B     EXIT
*
ERRORPAR DS    0H
         WTO   'SVMALC6: DSN(MEMBER) invalid or GDG not found',        X
               ROUTCDE=11
         LA    R15,ERRCODE
         B     EXIT
DONE     DS    0H
*---------------------------------------------------------------------
* Switch to Continue depending on Entry point requested function
         LA    R1,SWITCH2
         B     0(R7,R1)                Switch by Entry
SWITCH2  B     DYN2                    - Dynalloc
         B     EXIT                    - Unalloc
*---------------------------------------------------------------------
* Copy returned data to Parm fields:
DYN2     MVC   TDDN(8),WDDN            Set SVMPAR6.TDDN
         MVC   TDSORG(2),WORG          Set SVMPR6.DSORG
         CLC   TVOL(6),=6C' '          If PARM.VOL is blank
         BNE   EXIT                    N - skip
         MVC   TVOL(6),WVOL            Set Parm.VOL
         B     EXIT
*======================================================================
EXIT     FIN
*---------------------------------------------------------------------
* Constants and DSECTs:
ERRCODE  EQU   4
#BLANKS  DC     CL8' '
MOVDSN   MVC   DSN(0),TDSN
MOVMEMB  MVC   MEMBER(0),0(R1)
RBLEN    EQU   (S99RBEND-S99RB)        24
RBXLEN   EQU   36
DSNTU    DC    AL2(DALDSNAM)           0002 Template for Input DSNAME
         DC    X'0001'
         DC    X'002C'                      Set length to 44
         DC    44C' '
DSNLEN   EQU   *-DSNTU                      Length of template
STSTU    DC    AL2(DALSTATS)           0004 Template for Input DISP
         DC    X'0001'
         DC    X'0001'
         DC    X'08'                        08=SHR
         DC    X'00'                        keep aligned at halfword
STSLEN   EQU   *-STSTU                      Length of template
RETDDN   DC    AL2(DALRTDDN)           0055 Template for Output DDN
         DC    X'0001'
         DC    X'0008'
         DC    8C' '
DDNLEN   EQU   *-RETDDN                     Length of template
RTORG    DC    AL2(DALRTORG)           0057 Template for Output DSORG
         DC    X'0001'
         DC    X'0002'
         DC    2X'0'
ORGLEN   EQU   *-RTORG                      Length of template
RTVOL    DC    AL2(DALRTVOL)           005D Template for Output VOLSER
         DC    X'0001'
         DC    X'0006'
         DC    6C' '
VOLLEN   EQU   *-RTVOL                      Length of template
MEMTU    DC    AL2(DALMEMBR)           0003 Template for Input MEMBER
         DC    X'0001'
         DC    X'0008'                      length=8
         DC    8C' '
MEMLEN   EQU   *-MEMTU                      Length of template
EID      DC    C'S99RBX'
DALDDN   DC    AL2(DALDDNAM)           0001 Key for input DDN
DALVOL   DC    AL2(DALVLSER)           0010 Key for input VOLSER
*
#SNAPC   SNAP  DCB=#SNAPDCB,MF=L,ID=245,PDATA=ALL
#SNAPCL  EQU   *-#SNAPC
#SNAPDCB DCB BLKSIZE=882,DSORG=PS,LRECL=125,MACRF=(W),RECFM=VBA,       *
               DDNAME=SNAP
#SNAPDCL EQU   *-#SNAPDCB
         LTORG
*----------------------------------------------------------------------
WA       DSECT
S        DS    18F                     Savearea
WRBPTR   DS    A                       Pointer to S99RB
WRB      DS    XL(RBLEN)               S99RB
WRBX     DS    XL(RBXLEN)              S99RBX
WTUP1    DS    A                       TUP 1
WTUP2    DS    A                       TUP 2
WTUP3    DS    A                       TUP 3
WTUP4    DS    A                       TUP 4
WTUP5    DS    A                       TUP 5
WTUP6    DS    A                       TUP 6
WTUDSN   DS    XL(DSNLEN)              TU 1 - DSN
WDSN     EQU   WTUDSN+6                   DSN position
WTUSTS   DS    XL(STSLEN)              TU 2 - DISP
WSTS     EQU   WTUSTS+6                   DISP position
WTUDDN   DS    XL(DDNLEN)              TU 3 - DDNAME (ret)
WDDN     EQU   WTUDDN+6                   DDN position
WTUORG   DS    XL(ORGLEN)              TU 4 - DSORG  (ret)
WORG     EQU   WTUORG+6                   DSORG position
WTUVOL   DS    XL(VOLLEN)              TU 5 - VOLUME (ret)
WVOL     EQU   WTUVOL+6                   VOL position
WTUMEM   DS    XL(MEMLEN)              TU 6 - MEMBER
WMEM     EQU   WTUMEM+6                   MEM position
*
SECOND   DS    F                       work
DSN      DS    CL44
MEMBER   DS    CL8
SNAPDAD  DS    A
SNAPDCB  DCB BLKSIZE=882,DSORG=PS,LRECL=125,MACRF=(W),RECFM=VBA,       *
               DDNAME=SNAP
SNAPC    SNAP  PDATA=ALL,MF=L
         DS    0D
CAMLST1  DS    0F
         DS    AL1(68)
         DS    AL1(0)
         DS    AL1(0)
         DS    AL1(0)
         DS    A(DSN)
         DS    A(0)
         DS    A(LOCAREA)
LOCAREA  DS    0D
         DS    XL256
         DS    2D
WALEN    EQU   *-WA
*
SVMALC6  CSECT
SVMPAR6  SVMPAR6 DSECT=YES             PARM data structure
         YREGS                         General Regs
         IEFZB4D0                      S99 Dsects
         IEFZB4D2                      S99 Mnemonics for Text Units
         END
//*
//LKED    EXEC PGM=HEWLKED,
//        PARM='LET,NCAL,LIST,MAP,RENT,RMOD=24,AMOD=24',
//        COND=(8,LE)
//SYSLMOD  DD DISP=SHR,DSN=SYS3.UTILITY.LOADLIB.TEST       <== hlq.LOAD
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD DSN=*.ASMH.SYSLIN,DISP=(OLD,PASS)
//         DD  *
     ALIAS SVMDEL6
     NAME  SVMALC6(R)
//*
