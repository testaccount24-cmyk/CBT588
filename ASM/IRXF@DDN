//jobname JOB (account),userid,CLASS=S,MSGCLASS=Y,REGION=4M
//*
//* First modify JOB card and data set names to your environment
//* Assemble and Link program/module
//*
//ASMH EXEC PGM=ASMA90,REGION=4M,
// PARM='RENT,OBJECT,NODECK,NOXREF,BATCH'
//SYSLIB   DD DISP=SHR,DSN=SYS3.UTILITY.MACLIB.TEST      <== hlq.MACLIB
//         DD DISP=SHR,DSN=SYS1.MACLIB
//         DD DISP=SHR,DSN=SYS1.MODGEN
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200
//SYSIN    DD *
*---------------------------------------------------------------------
     TITLE 'IRXF@DDN REXX function L_DDN'
*---------------------------------------------------------------------
* History of Changes (last comes first):
*
* 07-10-2003 SVM Added WTP if IRXSAY not available (in OPS)
* 05-16-2003 SVM Added SYSMEMBER for dsn(member)
* 05-02-2003 SVM Added 4-digit unit processing
* 04-24-2003 SVM Added Say error msg
* 02-25-2003 SVM Fixed SWAREQ call -> LOSEPAX=YES  )
*                    Added limited processing for non-dasd
* 01-03-2003 SVM Created using SVM0025 (old LISTDDN)
*.....................................................................
*
* FUNCTION:     Create a limited number of LISTDSI variables.
*               Variables that have no data will be cleared to null.
*               (See TSO/E REXX Reference. TSO/E External functions
*               for the variables names).
*               SYSRACFA is assigned RACF access available for the
*               owner of the job/task executing this function.
*               SYSUTYPE is assigned to unit type (DISK, TAPE).
*               Works outside TSO environment.
*               Works with either disk and/or tape datasets.
*
* Sample use:   If L_DDN('SYSUT1') Then
*                  /* use returned variables */
*
* PARAMETERS:   ddname
*           or  DDNAME+n    n - number in DD concatenation
*
* OUTPUT:       R15 = 0
*               Result = 1 - normal end
*               Result = 1 - normal end
*               Result = 0 (all vars cleared)
*                  - no parm
*                  - ddname not found
*
* ATTRIBUTES:   REENTRANT, AMODE=31, RMODE=ANY
*
* EXTERNALS:    SVM0033 - shared with IRXF@DSN common module
*                         that sets up REXX variables
*---------------------------------------------------------------------
         EJECT
*---------------------------------------------------------------------
.* Macro to help clear variable: &N is a name of var name constant
         MACRO
         STORE &N,&C=SHVSTORE
         AIF   ('&N' EQ '').NON
         LA    R1,&N
         ST    R1,SHVNAMA               --> store name addr
         LA    R1,L'&N
         ST    R1,SHVNAML               --> Store name length
         MVI   SHVCODE,&C               --> Set "store" code
         BAL   R14,CALLXCOM             - create variable
.NON     ANOP
         MEND
*
IRXF@DDN  BEGIN A=31,R=31                                                0000062
WRK      WORK  LV=WRKL,LOC=BELOW
         B     START
*
EXIT     SR    R15,R15
         FIN
*--------------------
* REGISTER EQUATES:
* R6  -> JFCB
* R7  -> TIOT entry
* R8  -> SHVBLOCK
* R9  -> EVALBLOCK result block
* R10 -> IRXEFPL   parm block
* R11 -> ENVBLOCK  environment block
*---------------------------------------------------------------------
*- Set REXX environment:
START    DS    0H
         ST    R0,ENVBLKA              save it
         LR    R10,R1                  IRXEFPL
         USING EFPL,R10                - parm list
         LR    R11,R0                  ENVBLOCK
         USING ENVBLOCK,R11            - externals
         L     R9,EFPLEVAL
         L     R9,0(R9)                EVALBLOCK
         USING EVALBLOCK,R9            - result
         LA    R8,SHVBLK
         USING SHVBLOCK,R8             - to set variables
         BAL   R14,SETSHV
         MVI   EVALBLOCK_EVDATA,C'1'   Store result value
         LA    R4,1
         ST    R4,EVALBLOCK_EVLEN      Store Result length
*---------------------------------------------------------------------*
*- Init all variables to '', drop SYSDDNAME:
*---------------------------------------------------------------------*
*        WTO   'Clearing Variables...',ROUTCDE=11
         BAL   R14,CLEAR
* get parm #1 (DDNAME)
         LA    R2,1                    Counter in ddname+n
         BAL   R14,GETPARM             R3=addr,R4=length (0=not found)
         LA    R15,#ERR1
         LTR   R4,R4
         BZ    ERROR                   no parm passed
         BAL   R14,SPLITDD             R4=new length, R2=# of DD
         ST    R4,DDLEN
         BCTR  R4,0                    length - 1
         MVC   DDNAME,=8C' '
         EX    R4,MVCDDN               copy parm to DDNAME
         MVC   DDN(8),DDNAME           === store DDNAME ===
*---------------------------------------------------------------------*
*- locate 1st TIOT DD-entry and lookup
*---------------------------------------------------------------------*
*        WTO   'Searching TIOT...',ROUTCDE=11
         XC    EPA,EPA
         L     R15,CVTPTR
         USING CVT,R15
         L     R15,CVTTCBP
         L     R15,PSATOLD-PSATNEW(R15)
         USING TCB,R15
         L     R15,TCBTIO
         USING TIOT1,R15
         LA    R15,TIOENTRY            1st DD-entry
         ST    R15,TIOE1               save it
         DROP  R15                     USING
*- search for DDNAME in TIOT DD entries: R1=0 or DD number in DD concat
         L     R7,TIOE1
DDLOOP   SR    R4,R4
         IC    R4,0(R7)                 DDentry length
         LA    R15,#ERR2
         LTR   R4,R4                    If = 0
         BZ    ERROR                    DD not found
         CLC   DDNAME,4(R7)
         BNE   NEXTDD                   Iterate
         LTR   R2,R2
         BZ    RDDN                     no number -> found
         MVC   DDNAME(8),#BLANKS        now look for blanks
         BCTR  R2,0                     drop counter by 1
NEXTDD   LA    R7,0(R4,R7)              Advance to next TIOT DD entry
         B     DDLOOP
*
*---------------------------------------------------------------------*
* Return zero or non-zero RC:
*---------------------------------------------------------------------*
*
*
*---------------------------------------------------------------------*
* Assign dataset variables: R7 -> TIOT DD entry,
*---------------------------------------------------------------------*
*- DDNAME FOUND: Store VOLSER and UNIT, Return SYSDDNAME:
RDDN     DS    0H
*        WTO   'RDDN...',ROUTCDE=11
         SR    R4,R4
         ICM   R4,7,17(R7)              R4 -> Tiot Unit addr
         USING UCBOB,R4
         MVC   UTYPE(4),UCBTYP          Copy UCBTYP
         MVC   VOL(6),UCBVOLI           === Store VOL ===
         CLC   UCBWGT+1(3),=C'UCB'      Check for 4-digit UNIT
         BE    FOURDGTS                 yes
         MVC   UNIT(4),UCBWGT           === Store UNIT ===
         MVI   UNIT,C'0'
         B     LOCJFCB
FOURDGTS UNPK  D(5),UCBCHAN(3)          take 4-digit address
         MVC   UNIT(4),D                === store UNIT ===
         DROP  R4                       USING
*---------------------------------------------------------------------
*- Locate JFCB (set R6) using SWAREQ:
LOCJFCB  DS    0H
*        WTO 'Locating JFCB...',ROUTCDE=11
         LA    R5,EPA                  GET ADDRESS OF THE EPA
         ST    R5,SWEPAPTR             INITIALIZE EPA POINTER
         USING ZB505,R5                ESTABLISH ADDRESSABILITY TO EPA
         XC    SWAEPAX,SWAEPAX         INITIALIZE THE EPA
         MVC   SWVA,12(R7)             MV SVA OF JFCB INTO EPA
         SWAREQ FCODE=RL,EPA=SWEPAPTR,MF=(E,SWAPARMS),UNAUTH=YES
         L     R6,SWBLKPTR             POINT TO THE JFCB
         USING JFCB,R6                 ADDRESS JFCB
         MVC   DSN(44),JFCBDSNM        Store DSN
         DROP  R5                      USING
         DROP  R6                      USING
*---------------------------------------------------------------------*
*- Call SVM0033 to set up variables:
         LA    R1,DDN
         ST    R1,P1
         LA    R1,DSN
         ST    R1,P2
         LA    R1,UNIT
         ST    R1,P3
         LA    R1,VOL
         ST    R1,P4
         LA    R1,UTYPE
         ST    R1,P5                   no VL
         ST    R6,P6                   JFCB addr
         LA    R1,P1
         L     R0,ENVBLKA
         CALL  SVM0033                 Set all variables
         B     EXIT
*=====================================================================*
*        S U B R O U T I N E S                                        *
*---------------------------------------------------------------------*
* Clear (empty) all variables:
*---------------------------------------------------------------------*
CLEAR    ST    R14,SAV2R14
         LA    R3,DDNAME
         ST    R3,SHVVALA               --> store value addr
         SR    R1,R1                    set value length = 0
         ST    R1,SHVVALL               --> store value length
         STORE #DSN
         STORE #MEMNM
         STORE #VOL
         STORE #UNIT
         STORE #DSORG
         STORE #RECFM
         STORE #LRECL
         STORE #BLKSI
         STORE #KEYLE
         STORE #UNITS
         STORE #PRIMA
         STORE #SECND
         STORE #DIRBA
         STORE #DIRBU
         STORE #MEMBS
         STORE #CRDT
         STORE #EXPDT
         STORE #REFD
         STORE #EXTEN
         STORE #PASSW
         STORE #RACF
         STORE #UPDAT
         STORE #UTYPE
* Set SYSDDNAME:
         STORE #DDN,C=SHVDROPV          --> DROP SYSDDNAME
         L     R14,SAV2R14
         BR    R14
*---------------------------------------------------------------------*
* Set IRXEXCOM parameters:
*---------------------------------------------------------------------*
SETSHV   DS    0H
* (re)make addr list:
         LA    R1,#EXCOM
         ST    R1,A1                   A1 = Addr of module name
         XC    A2(8),A2                clear A2 and A3
         LA    R1,SHVBLK
         ST    R1,A4                   A4 -> SHVBLOCK
         OI    A4,X'80'                set VL bit
* (re)fill SHVBLOCK:
         XC    SHVNEXT(SHVBLEN),SHVNEXT clear it all
         BR    R14
*--------------------------------------------------------------------*
* Call IRXEXCOM:
*--------------------------------------------------------------------*
CALLXCOM ST    R14,SAVER14
         L     R15,ENVBLOCK_IRXEXTE    addr IRXEXTE
         USING IRXEXTE,R15
         L     R15,IRXEXCOM            addr IRXEXCOM
         DROP  R15                     USING
         LA    R1,A1                   parm list addr
         LR    R0,R11                  point to ENVBLOCK
         BALR  R14,R15                 Call IRXEXCOM
         ST    R15,SAVERC              save return code
         L     R14,SAVER14             restore return address
         BR    R14
*---------------------------------------------------------------------*
* Strip number left: value: D, length: R1.
*    Set R1 to new length, set R2 to new addr
*---------------------------------------------------------------------*
STRIPL   STM   R3,R5,WRKSAVE2
         LA    R2,D                     start with 1st char
         LA    R5,1                     Min result length
         LNR   R4,R5                    Increment = -1
LOOPN    CLI   0(R2),C'0'
         BNE   CUTN
         LA    R2,1(R2)                 put start to next char
         BXH   R1,R4,LOOPN              cut length by 1
*  R2-> leftmost non-zero, R1 = new length
CUTN     LM    R3,R5,WRKSAVE2
         BR    R14
*---------------------------------------------------------------------*
* GET input parameter (addr,length) by number:                        *
*    entry :  R2=parm # (not changed)                                 *
*    use   :  R15 (return 0, when parm is found)                      *
*    return:  to R14, R3=parm addr, R4=parm length (0, if not found)  *
*---------------------------------------------------------------------*
GETPARM  DS    0H
         LR    R15,R2
         SR    R4,R4                   make length zero
         L     R3,EFPLARG              A(1st parm)
         B     GETPL1                  go into loop
GETPL    LA    R3,8(R3)                next parm
GETPL1   CLC   0(8,R3),PARMEND
         BER   R14                     not found
         BCT   R15,GETPL
* parm found:
         L     R4,4(R3)                parm length
         L     R3,0(R3)                parm addr
         BR    R14
*---------------------------------------------------------------------*
* SPLIT ddname+nn to ddname and nn
*    Set R2 to nn, update R4 = length of ddname
*    uses R1
*---------------------------------------------------------------------*
SPLITDD  STM   R5,R14,WRKSAVE2
         LR    R5,R3                    save R3
         LA    R2,1
         LR    R1,R3                    R1 -> start of ddname
         AR    R3,R4
         BCTR  R3,0                     R3 -> last char of ddname
SLOOP    CLI   0(R1),C'+'
         BE    SFOUND
         BXLE  R1,R2,SLOOP              check next char
         B     SZERO
*  R1-> '+'
SFOUND   LR    R4,R1
         SR    R4,R5                    set R4 to new length
*  check if nn is decimal digits:
         LA    R1,1(R1)
         LR    R6,R1                    R6 -> start of nn
SLOOP2   TM    0(R1),X'F0'
         BNO   SZERO
         BXLE  R1,R2,SLOOP2             check next char
*  Store nn to D aligned right:
         LR    R2,R1
         SR    R2,R6                    R2 = length of nn
         BNP   SZERO                    if length = 0
         C     R2,#8
         BH    SZERO                    if length > 8
         LA    R1,D+8
         SR    R1,R2                    start of nn in D
         MVC   D(8),#ZEROES
         BCTR  R2,0                     length - 1
         EX    R2,MVCNN                 move nn to D
         NI    D+7,X'CF'                set sign '+'
*  Convert nn to binary and store to R1
         PACK  D(8),D(8)
         CVB   R2,D
         B     SRETNN
*  NN not specified or invalid - set to 0
SZERO    DS    0H
         SR    R2,R2                    nn = 0
SRETNN   LR    R3,R5                    restore R3
SEXIT    LM    R5,R14,WRKSAVE2
         BR    R14
*--------------------------------------------------------------------
* Error processing: Say message and return '0':
* R15 -> ERRBLK
ERROR    DS    0H
         USING ERRBLK,R15
*        MVC   RETC(4),ERRCODE
         MVC   MESSAGE(ERRMSGL),ERRMSG store for WTP
* make parm for IRXSAY:
         MVC   P1(8),=CL8'WRITE'       function request
         LA    R1,ERRMSG
         ST    R1,P3                   string addr
         LA    R1,ERRMSGL
         ST    R1,P4                   string length
         ST    R11,P5                  ENVBLOCK
*        XC    P5(4),P5                clear RC
* make addr list:
         LA    R1,P1
         ST    R1,A1
         LA    R1,P3
         ST    R1,A2
         LA    R1,P4
         ST    R1,A3
         LA    R1,P5
         ST    R1,A4
*        LA    R1,P5
*        ST    R1,A5
         OI    A4,X'80'                set VL bit
* call program:
         LA    R1,A1                   parm list addr
         L     R15,ENVBLOCK_IRXEXTE    addr IRXEXTE
         USING IRXEXTE,R15
         L     R15,IRXSAY              addr IRXSAY
         DROP  R15                     USING
         LTR   R15,R15
         BZ    NOSAY                   Say not available
         BALR  R14,R15                 Call IRXSAY
         B     ERRFIN
* WTP message instead of Saying:
NOSAY    LA    R1,MSGLEN
         ST    R1,A1
         OI    A1,X'80'
         LA    R1,ERRMSGL
         STH   R1,MSGLEN
         LA    R1,A1
         CALL  WTP
*
ERRFIN   MVI   EVALBLOCK_EVDATA,C'0'   Return '0'
         B     EXIT
*
*=====================================================================*
*        CONSTANTS                                                    *
*---------------------------------------------------------------------*
         DS    0F
PARMEND  DC    8X'FF'
MVCDDN   MVC   DDNAME(0),0(R3)              move parm to DDNAME
MVCNN    MVC   0(0,R1),0(R6)                move parm to D
#EXCOM   DC    C'IRXEXCOM'                  REXX module name
#DSN     DC    C'SYSDSNAME'                 variable name
#DDN     DC    C'SYSDDNAME'                 variable name
#VOL     DC    C'SYSVOLUME'                 variable name
#UNIT    DC    C'SYSUNIT'                   variable name
#DSORG   DC    C'SYSDSORG'                  variable name
#RECFM   DC    C'SYSRECFM'                  variable name
#LRECL   DC    C'SYSLRECL'                  variable name
#BLKSI   DC    C'SYSBLKSIZE'                variable name
#KEYLE   DC    C'SYSKEYLEN'                 variable name
#UNITS   DC    C'SYSUNITS'                  variable name
#PRIMA   DC    C'SYSPRIMARY'                variable name
#SECND   DC    C'SYSSECONDS'                variable name
#DIRBA   DC    C'SYSADIRBLK'                variable name
#DIRBU   DC    C'SYSUDIRBLK'                variable name
#MEMBS   DC    C'SYSMEMBERS'                variable name
#CRDT    DC    C'SYSCREATE'                 variable name
#EXPDT   DC    C'SYSEXDATE'                 variable name
#REFD    DC    C'SYSREFDATE'                variable name
#EXTEN   DC    C'SYSEXTENTS'                variable name
#PASSW   DC    C'SYSPASSWORD'               variable name
#RACF    DC    C'SYSRACFA'                  variable name
#UPDAT   DC    C'SYSUPDATED'                variable name
#UTYPE   DC    C'SYSUTYPE'                  variable name (added)
#MEMNM   DC    C'SYSMEMBER'                 variable name (added)
#ZERO    DC    F'0'
#ZEROES  DC    C'00000000'
#BLANKS  DC    C'        '                  const
#8       DC    F'8'
#ERR1    DC    F'12'                   No parm
         DC    CL40'L_DDN: Error - no parm passed          '
#ERR2    DC    F'12'                   No DDNAME
         DC    CL40'L_DDN: Error - DDNAME not found        '
         DS    0F
         LTORG
         EJECT
*---------------------------------------------------------------------*
*        LOCAL WORK AREA                                              *
*---------------------------------------------------------------------*
         SPACE 1
ERRBLK   DSECT
ERRCODE  DS    F
ERRMSG   DS    CL40
ERRMSGL  EQU   *-ERRMSG
*
WRK      DSECT
WRKSAVE  DS    18F                     REGISTER SAVE AREA
WRKSAVE2 DS    18F                     REGISTER SAVE AREA
D        DS    D
TIOE1    DS    F
SWEPAPTR DS F
SWAPARMS SWAREQ MF=L
EPA      DS    CL28                    Appears to use 26 bytes...
DDNAME   DS    CL8
DDN      DS    CL8
DDLEN    DS    F
*- Function call parameter:
*- R0 -> env block IRXENVB
*- R1 -> following parameter list:
A1       DS    A
A2       DS    A
A3       DS    A
A4       DS    A
A5       DS    A
A6       DS    A
* parameter values:
SHVBLK   DS    8F'0'                   IRXSHVB instance
*- R1 -> following parameter list for SVM0033:
P1       DS    A
P2       DS    A
P3       DS    A
P4       DS    A
P5       DS    A
P6       DS    A
ENVBLKA  DS    A                       save ENVBLOCK address
SAVERC   DS    F                       retcode from IRXEXCOM
SAVER14  DS    F                       save R14
SAV2R14  DS    F                       save R14
DSN      DS    44C
UNIT     DS    F
VOL      DS    6C
UTYPE    DS    4C
MSGLEN   DS    H                       For WTP
MESSAGE  DS    CL40                    For WTP
WRKL     EQU   (*-WRK+7)/8*8           WORK AREA LENGTH, words
         EJECT
*---------------------------------------------------------------------*
*        DSECTS                                                       *
*---------------------------------------------------------------------*
         PRINT NOGEN
         YREGS
* REXX specific DSECTs:
         IRXEFPL DSECT=YES             REXX parameter list
         IRXEVALB                      REXX evaluation block EVALBLOCK
         IRXEXTE                       REXX vector of external ep
         IRXENVB                       REXX environment block ENVBLOCK
         IRXSHVB                       REXX shared variables block
* SYSTEM SPECIFIC DSECTS:
         CVT DSECT=YES
         IEFJESCT
         IEFZB505 LOCEPAX=YES
         IKJTCB  DSECT=YES
         IHAPSA
TIOT     DSECT
         IEFTIOT1
JFCB     DSECT
         IEFJFCBN
         IEFUCBOB
         PRINT GEN
         END
//*
//LKED    EXEC PGM=HEWLKED,PARM='CALL,MAP,RENT,AC=1,RMOD=ANY,AMOD=31',
//        COND=(8,LE)
//SYSLIB   DD DISP=SHR,DSN=SYS3.UTILITY.LOADLIB.TEST       <== hlq.LOAD
//SYSLMOD  DD DISP=SHR,DSN=SYS3.UTILITY.LOADLIB.TEST(IRXF@DDN) <=*.LOAD  0351000
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD DSN=*.ASMH.SYSLIN,DISP=(OLD,PASS)
//*
//* Test changes, if any:
//*TEP1   EXEC PGM=IKJEFT1B,
//*       PARM='%PW'
//STEP1   EXEC PGM=IRXJCL,
//        PARM='PW'
//SYSEXEC  DD DISP=SHR,DSN=SYS3.UTILITY.EXEC.SHARE         <== hlq.EXEC
//STEPLIB  DD DISP=SHR,DSN=SYS3.UTILITY.LOADLIB.TEST       <== hlq.LOAD
//SYSTSPRT DD  SYSOUT=*
//SYSTSIN  DD  DUMMY
//SYSUDUMP DD  SYSOUT=*
//SNAP     DD  SYSOUT=*
//ABNLIGNR DD  DUMMY                                   <- abend-aid
//TESTDD   DD DISP=SHR,DSN=SYS1.LINKLIB
//*TESTDD   DD DISP=SHR,DSN=SOME.GDG(0)
//*ESTDD   DD DISP=SHR,DSN=RESERVE3,UNIT=CART,LABEL=3,VOL=SER=FDR53T
//*UNIT=DASD,VOL=SER=TSTTS1
//TEMPL    DD *
 dd = 'TESTDD'
 result = IRXF@DDN()
 Say 'DD=' 'Result=' result
 result = IRXF@DDN('XXXXXXXX')
 Say 'DD=XXXXXXXX' 'Result=' result
 result = IRXF@DDN(dd)
 Say 'DD='dd 'Result=' result
 Say ' SYSDSNAME='   SYSDSNAME
 Say ' SYSDDNAME='   SYSDDNAME
 Say ' SYSMEMBER='   SYSMEMBER
 Say ' SYSVOLUME='   SYSVOLUME
 Say ' SYSUNIT='     SYSUNIT
 Say ' SYSUTYPE='    SYSUTYPE
 Say ' SYSDSORG='    SYSDSORG
 Say ' SYSRECFM='    SYSRECFM
 Say ' SYSLRECL='    SYSLRECL
 Say ' SYSBLKSIZE='  SYSBLKSIZE
 Say ' SYSKEYLEN='   SYSKEYLEN
 Say ' SYSUNITS='    SYSUNITS
 Say ' SYSPRIMARY='  SYSPRIMARY
 Say ' SYSSECONDS='  SYSSECONDS
 Say ' SYSADIRBLK='  SYSADIRBLK
 Say ' SYSMEMBERS='  SYSMEMBERS
 Say ' SYSUDIRBLK='  SYSUDIRBLK
 Say ' SYSCREATE='   SYSCREATE
 Say ' SYSEXDATE='   SYSEXDATE
 Say ' SYSREFDATE='  SYSREFDATE
 Say ' SYSEXTENTS='  SYSEXTENTS
 Say ' SYSPASSWORD=' SYSPASSWORD
 Say ' SYSRACFA='    SYSRACFA
 Say ' SYSUPDATED='  SYSUPDATED
 EXIT
