//jobname JOB (account),userid,CLASS=S,MSGCLASS=Y,REGION=4M
//*
//*  First modify JOB card and data set names to your environment
//*  Assemble and Link program RACFCHK
//*
//*  Is been used in SYS3.ROSC.ETSOLIB to produce messages
//ASMH EXEC PGM=ASMA90,REGION=4M,
// PARM='RENT,OBJECT,NODECK,NOXREF,BATCH'
//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB
//         DD  DSN=SYS1.AMODGEN,DISP=SHR
//         DD  DSN=SYS3.RACFCHK.INSTALL,DISP=SHR        <== RACF MACLIB
//         DD DISP=SHR,DSN=SYS3.UTILITY.MACLIB.TEST      <== hlq.MACLIB
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200
//SYSIN    DD *
*---------------------------------------------------------------------*
     TITLE 'RACFCHK  Check Authorisation status for DSN and UserID'
*---------------------------------------------------------------------*
* History of Changes (last comes first):                              *
*                                                                     *
* 02-27-2003 SVM Changed to std macros
*                    Added check if RACF is active
* 01-04-2001 SVM Created
*.....................................................................*
*                                                                     *
* FUNCTION:
*               1) Reads and validates parameter                      *
*               1) Executes SVM0010 to Check authority                *
*               2) Returns result in R15:
*                   24: Invalid parameter
*                   20: Unlimited access (not specified in RACF)
*                   16: Alter access
*                   12: Control access
*                    8: Update access
*                    4: Read access
*                    0: No access
*
* How to use from REXX:
*               par = ',,DSNAME'
*               ADDRESS 'LINKMVS' 'RACFCHK' 'par'
*               Select
*                  When rc = 20 Then Say 'Unlimited'
*                  When rc = 16 Then Say 'Alter'
*                  When rc = 12 Then Say 'Control'
*                  When rc = 8  Then Say 'Update'
*                  When rc = 4  Then Say 'Read'
*                  When rc = 0  Then Say 'Denied'
*                  Otherwise         Say 'Error'
*               End
*
* INPUT:
*               R1        = addr(Parameter)
*               Parameter = HL2(len)CLlen'Text'
*               Text      = 'UserID,DATASET,Dsname'
*               UserID    - 1 to 8 chars
*               DATASET   - as written
*               Dsname    - 1 to 44 chars
*                                                                     *
* ATTRIBUTES:
*               REENTRANT,AMOD=31,RMOD=ANY
* Externals:
*               SVM0010                                               *
*---------------------------------------------------------------------*
RACFCHK  BEGIN
WRK      WORK  LV=WRKLEN,LOC=RES
         B     START
EXIT     FIN   0H
*
START    DS    0H
*   Check if RACF is active (used code from SHOWMVS, CBT file 492):
         L     R15,CVTPTR              (16) CVT address
         USING CVT,R15
         ICM   R2,B'1111',CVTRAC       RCVT
         BZ    ERROR                   No RACF
         USING RCVT,R2
         CLC   RCVTID,=C'RCVT'         Is this a RACF?
         BNE   ERROR                   no
         TM    RCVTSTAT,RCVTRNA        RACF Inactive?
         BO    ERROR                   yes, exit
         CLI   RCVTDSNL,0              Is it really RACF?
         BZ    ERROR                   no, exit
         DROP  R15
         DROP  R2

*   Extract and validate data from Parm to PAR0010:
         MVI   PUSER,C' '
         MVC   PUSER+1(7),PUSER    Clear PUSER
         MVI   PDSN,C' '
         MVC   PDSN+1(43),PDSN     Clear PDSN
*
         L     R1,0(R1)            Addr of EXEC parameter
         LH    R5,0(,R1)           Param length
         BCTR  R5,R0               Parm length - 1
         LTR   R5,R5               Check if > 0
         BNP   ERROR               No parm
         LA    R5,2(R5,R1)         Parm last char addr
         LA    R4,1                Loop step
*
         LA    R2,2(,R1)           Parm text addr
         LR    R10,R2              Save start
*
*   Search for 1st comma:
LOOP1    CLI   0(R2),C','          Comma?
         BE    PRCUSER
         BXLE  R2,R4,LOOP1         Next Char
* - Comma not found:
         B     ERROR
*
PRCUSER  LR    R9,R2               Comma position
         SR    R9,R10              Field length
         BZ    NEXT1               Empty - leave blank
         C     R9,F08
         BH    ERROR               Too long
         BCTR  R9,R0               Len - 1
*   Leave PUSER blank = Check it for myself
         EX    R9,MVCUSR           Copy UserID from Parm to PUSER
*
NEXT1    LA    R2,1(R2)            Next field start
         CR    R2,R5
         BNL   ERROR
         LR    R10,R2              Save start
*
*   Search for 2nd comma:
LOOP2    CLI   0(R2),C','          Comma?
         BE    PRCCLS
         BXLE  R2,R4,LOOP2         Next Char
* - Comma not found:
         B     ERROR
*
*   We skip 2nd parameter,
*   SVM0010 defaults it to DATASET
*
PRCCLS   LA    R10,1(R2)           Next field start
         CR    R10,R5
         BH    ERROR               DSN must be not empty
*
PRCDSN   LR    R9,R5
         SR    R9,R10              Field length - 1
         C     R9,F43
         BH    ERROR               Too long
         EX    R9,MVCDSN           Copy DSN from Parm
         LA    R10,PAR0010         Addr to traslate
         LA    R9,PRRET-PUSER-1    Length - 1 to translate
         EX    R9,TRANSL           Translate to Upper case
         B     CONT
*
MVCUSR   MVC   PUSER(1),0(R10)
MVCDSN   MVC   PDSN(1),0(R10)
TRANSL   TR    0(1,R10),TABELL
*
CONT     DS    0H
*        MVC   SAVER1(4),=C'@@@@'  *TT Test eye catcher
*        DC    X'0000'             *TT Test
*   Prepare and Call SVM0010:
         LA    R1,PAR0010
         CALL  SVM0010
*
*   Process return codes:
*
         L     R2,PRRET
         C     R2,F20              RACF REturn Code = X'14'
         BE    OK
         L     R15,F20             20 = "Not protected"
         B     EXIT
*
OK       L     R15,PRREA           Return RACF Reason Code
         B     EXIT
*
ERROR    L     R15,F24             24 = Parm invalid
         B     EXIT
*---------------------------------------------------------------------
*  Constants:
*
         DS    0D
F08      DC    F'8'
F10      DC    F'10'
F20      DC    F'20'
F24      DC    F'24'
F43      DC    F'43'
*
*  TABLE FOR TRANSLATION OF LOWER TO UPPER CASE.
*
         DS    0D
TABELL   DC    106AL1(*-TABELL)
         DC    X'7C'                    ?    --> ?
         DC    22AL1(*-TABELL)
         DC    X'C1C2C3C4C5C6C7C8C9'    a - i --> A - I
         DC    7AL1(*-TABELL)
         DC    X'D1D2D3D4D5D6D7D8D9'    j - r --> J - R
         DC    8AL1(*-TABELL)
         DC    X'E2E3E4E5E6E7E8E9'      s - z --> S - Z
         DC    22AL1(*-TABELL)          other
         DC    X'7B'                    ?    --> ?
         DC    15AL1(*-TABELL)          other
         DC    X'5B'                    ?    --> ?
         DC    47AL1(*-TABELL)          other
*
         LTORG
*
***********************************************************************
*  WORKAREA IS A GETMAINED AREA USED
*
WRK      DSECT
         DS    0D
SAVE     DS    18F
SAVER1   DS    F
PAR0010  EQU    *
         PAR0010
         DS    0D
*
WRKLEN   EQU   *-WRK
*
         EJECT
* SVM0010 Parm format.     Input:
*PAR0010  EQU    *
*PUSER    DS     CL8         User ID
*PDSN     DS     CL44        DSNAME
*                          Output:
*PRRET    DS     F           RACF return code
*PRREA    DS     F           RACF reason code
*PSFRC    DS     F           SAF  return code
*PSFRS    DS     F           SAF  reason code
*
         PRINT NOGEN
         CVT   DSECT=YES
RCVT     ICHPRCVT
         EJECT
         REGS
         EJECT
         END
//*
//* LINK EDIT the Program:
//*
//LKED    EXEC PGM=HEWLKED,PARM='CALL,MAP,RENT,AC=1,RMOD=ANY,AMOD=31',
//        COND=(8,LE)
//SYSLIB   DD DISP=SHR,DSN=SYS3.UTILITY.LOADLIB.TEST         - HLQ.LOAD
//SYSLMOD  DD DISP=SHR,DSN=SYS3.UTILITY.LOADLIB.TEST(RACFCHK) -HLQ.LOAD
//*YSLMOD  DD DISP=SHR,DSN=SYS3.ROSC.ETSOLIB(RACFCHK)
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD DSN=*.ASMH.SYSLIN,DISP=(OLD,PASS)
//*
//* Test the Program:
//* Empty parm: RC=24
//GO1      EXEC PGM=RACFCHK,COND=(8,LE,ASMH)
//* PARM=''
//STEPLIB  DD DISP=SHR,DSN=SYS3.UTILITY.LOADLIB.TEST         - HLQ.LOAD
//SYSUDUMP DD SYSOUT=*
//*
//* No DSN: RC=24
//GO2      EXEC PGM=RACFCHK,COND=(8,LE,ASMH),
// PARM=','
//STEPLIB  DD DISP=SHR,DSN=SYS3.UTILITY.LOADLIB.TEST         - HLQ.LOAD
//SYSUDUMP DD SYSOUT=*
//*
//* Empty DSN RC=24
//GO3      EXEC PGM=RACFCHK,COND=(8,LE,ASMH),
// PARM='s,,'
//STEPLIB  DD DISP=SHR,DSN=SYS3.UTILITY.LOADLIB.TEST         - HLQ.LOAD
//SYSUDUMP DD SYSOUT=*
//*
//* Valid parm, 1-st Party request: RC=20 (Not protected)
//GO4      EXEC PGM=RACFCHK,COND=(8,LE,ASMH),
// PARM=',,SYS3.UTILITY.EXEC.SHARE'
//STEPLIB  DD DISP=SHR,DSN=SYS3.UTILITY.LOADLIB.TEST         - HLQ.LOAD
//SYSUDUMP DD SYSOUT=*
//*
//* Valid parm, 1-st Party request: RC=16 (Alter)
//GO5      EXEC PGM=RACFCHK,COND=(8,LE,ASMH),
// PARM=',,SYS1.LINKLIB'                            - RACF prot ALTER
//STEPLIB  DD DISP=SHR,DSN=SYS3.UTILITY.LOADLIB.TEST         - HLQ.LOAD
//SYSUDUMP DD SYSOUT=*
//
//* Valid parm, 1-st Party request: RC=12 (Control)
//GO6      EXEC PGM=RACFCHK,COND=(8,LE,ASMH),
// PARM=',,Cp.D2900001.Protectd.ForSVM.ASCNTL'      - RACF prot CONTROL
//STEPLIB  DD DISP=SHR,DSN=SYS3.UTILITY.LOADLIB.TEST         - HLQ.LOAD
//SYSUDUMP DD SYSOUT=*
//*
//* Valid parm, 1-st Party request: RC=0 (No access)
//GO7      EXEC PGM=RACFCHK,COND=(8,LE,ASMH),
// PARM=',,Cp.D2900001.Protectd.ForSVM.ASNONE'      - RACF prot NONE
//STEPLIB  DD DISP=SHR,DSN=SYS3.UTILITY.LOADLIB.TEST         - HLQ.LOAD
//SYSUDUMP DD SYSOUT=*
//*
//* Valid parm, 1-st Party request: RC=4 (Read)
//GO8      EXEC PGM=RACFCHK,COND=(8,LE,ASMH),
// PARM=',,Cp.D2900001.Protectd.ForSVM.ASREAD'      - RACF prot READ
//STEPLIB  DD DISP=SHR,DSN=SYS3.UTILITY.LOADLIB.TEST         - HLQ.LOAD
//SYSUDUMP DD SYSOUT=*
//*
//* Valid parm, 1-st Party request: RC=8 (Update)
//GO9      EXEC PGM=RACFCHK,COND=(8,LE,ASMH),
// PARM=',,Cp.D2900001.Protectd.ForSVM.ASUPD'       - RACF prot UPDATE
//STEPLIB  DD DISP=SHR,DSN=SYS3.UTILITY.LOADLIB.TEST         - HLQ.LOAD
//SYSUDUMP DD SYSOUT=*
//
//*************************************************
//* Valid Parm, 3-rd party request: not yet supported by this program
//GO3      EXEC PGM=RACFCHK,COND=((8,LE,ASMH),EVEN),
// PARM='USERID,DATASET,Cp.D2900001.Protectd.ForSVM'
//STEPLIB  DD DISP=SHR,DSN=SYS3.UTILITY.LOADLIB.TEST         - HLQ.LOAD
//SYSUDUMP DD SYSOUT=*
//*
