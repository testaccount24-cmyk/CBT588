//jobname JOB (account),userid,CLASS=S,MSGCLASS=Y,REGION=4M
//*
//* First modify JOB card and data set names to your environment
//* Assemble and Link program/module
//*
//ASMH EXEC PGM=ASMA90,REGION=4M,
// PARM='OBJECT,NODECK,NOXREF,BATCH,RENT'
//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB
//         DD DISP=SHR,DSN=SYS1.MODGEN
//         DD DISP=SHR,DSN=SYS3.UTILITY.MACLIB.TEST      <== hlq.MACLIB
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200
//SYSIN    DD *
*---------------------------------------------------------------------
     TITLE 'L_FWT REXX subroutine/function for Wait modify/interval'       00000
*---------------------------------------------------------------------
* History of Changes (last comes first):
*
* 05-02-2003 SVM     Fixed EXTRACT and TIMEXIT for reenterability
* 04-30-2003 SVM Created from FWAIT                                        00000
*                    Used data module SVM00000 to keep timer ECB
*                    for reenterability. SVMLOAD returns addr of
*                    this data module.
*.....................................................................
* FUNCTION:     1) Enable modify operator commands
*               2) Set interval and wait until either interval expires
*                  or stop/modify command issued
*               3) If modify/stop was requested, return 'STOP'
*                  or command, if interval has expired, return null.
*
* Sample use:
*               /* Set program to wait for modify: */
*                  reply = L_FWT()
*               /* Set program to wait for either modify or timer: */
*                  reply = L_FWT(interval)
*
*               If no parameter, just wait for modify.
*               Parameter format: xxxxm or xxxxs
*                  xxxx - decimal number, 1-4 digits,
*                  m - interval in minutes (upper/lower case)
*                  s - interval in seconds (upper/lower case)
*
* PARAMETERS:   interval
*
* OUTPUT:       R15 = non-zero, if parm is invalid of data module
*                  cannot be loaded.
*               returns string to REXX program:
*                  if interval has expired, reply = ''
*                  if stop/modify, reply = 'STOP' or command text
*
* ATTRIBUTES:   Reentrant, Amode=31, Rmode=Any
*
* Referenses:   IBM TSO Extensions for MVS. REXX/MVS Reference
*               Version 2 Release 5
*               Document Number SC28-1883-07
*               File Number S370/390-39
* Externals:
*               SVMLOAD (by call), SVM00000 (by LOAD)
*---------------------------------------------------------------------
         EJECT
*---------------------------------------------------------------------
WRK      DSECT
WRKSAVE  DS    18F                     REGISTER SAVE AREA
SAVE14   DS    14F                     local save area
RC       DS    F                       RC to return in R15
D        DS    D                       work for conversion
COMAREA  DS    F                       addr of common area
COMMAND  DS    80C                     field for result
CMDLEN   DS    F                       result length
INTERVAL DS    F                       interval value
*
ECBLIST  DS    0F
ECBA1    DS    F                       Stop/Modify ECB Address
ECBA2    DS    F                       Stimer ECB address
* EXTRACT parameters:
EXTR     EXTRACT ,FIELDS=(COMM),MF=L
EXTRL    EQU   *-EXTR
*
INTUNIT  DS    C                       interval units (m or s)
WRKL     EQU   (*-WRK+7)/8*8           WORK AREA LENGTH, words
*=====================================================================
IRXF@FWT BEGIN                                                             00000
WRK      WORK  LV=WRKL
         B     START
EXIT     L     R15,RC
         FIN
*---------------------------------------------------------------------
* REGISTER Use:
* R9  -> EVALBLOCK result block
* R10 -> IRXEFPL   parm block
* R11 -> ENVBLOCK  environment block
* R12 -> CSECT base
* R13 -> WRK base
*---------------------------------------------------------------------
*  Set addressability for REXX environment:
*---------------------------------------------------------------------
START    DS    0H
         XC    RC(4),RC
         LR    R10,R1                  IRXEFPL
         USING EFPL,R10                - parm list
         LR    R11,R0                  ENVBLOCK
         USING ENVBLOCK,R11            - externals
         L     R9,EFPLEVAL
         L     R9,0(R9)                EVALBLOCK
         USING EVALBLOCK,R9            - result
*---------------------------------------------------------------------
*  Get and check parm #1:
*---------------------------------------------------------------------
*     WTO 'IRXF@FWT started',ROUTCDE=11
         XC    INTERVAL,INTERVAL       Clear timer interval
         LA    R2,1                    Set input parm number
         BAS   R14,GETPARM             R3=addr,R4=length (0=not found)
         LTR   R4,R4                   Copy length to R8
         BZ    NOPARM
         BAS   R14,GETINTVL            Extract INTERVAL value
         LTR   R15,R15
         BNZ   ERROR
NOPARM   DS    0H
*---------------------------------------------------------------------
*  Enable Modify command:
*---------------------------------------------------------------------
         BAS   R14,TINIT               And set COMAREA
*---------------------------------------------------------------------
*  Set ECBA1 for modify command:
*---------------------------------------------------------------------
         L     R4,COMAREA              load
         L     R5,0(R4)                Get Stop/Modify ECB address
         ST    R5,ECBA1                Put in ECBLIST
*---------------------------------------------------------------------
*  If interval specified,  then set timer and ECBA2:
*---------------------------------------------------------------------
         L     R7,INTERVAL
         LTR   R7,R7
         BZ    NOTIMER                no - just check for Modify
* Locate TIMECB in a data module (for reenterability):
         LA    R1,SADDR
         CALL  SVMLOAD                R15 = addr of module
         LTR   R8,R15                 R8 = addr of data module
         BZ    ERROR
         USING SVM00000,R8
         LA    R6,TIMECB
         ST    R6,ECBA2               Set ECB addr in the list
         OI    ECBA2,X'80'            Set VL bit
         XC    TIMECB,TIMECB
*     WTO 'IRXF@FWT setting timer',ROUTCDE=11
         STIMER REAL,TIMEXIT,BINTVL=INTERVAL  Set timer interval
         B     WAIT
*---------------------------------------------------------------------
*  if no interval specified, wait just for modify:
*---------------------------------------------------------------------
NOTIMER  OI    ECBA1,X'80'             Set VL bit
*
*---------------------------------------------------------------------
*              W A I T   F O R   E V E N T S :
*---------------------------------------------------------------------
*
WAIT     WAIT  ECBLIST=ECBLIST,LONG=YES     Wait until an event occurs
*
*---------------------------------------------------------------------
*  Process events: if timer was specified, check timer ECB first:
*---------------------------------------------------------------------
         L     R7,INTERVAL
         LTR   R7,R7                   Interval was set ?
         BZ    MODIFY1                  - no
         TM    TIMECB,X'40'            Has timer expired?
         BO    PRCTIMER                yes - Go process
*     WTO 'TTIMER CANCEL...',ROUTCDE=11
         TTIMER CANCEL                 cancel timer
*---------------------------------------------------------------------
*  Otherwise process modify command:
*---------------------------------------------------------------------
MODIFY1  DS    0H
*     WTO 'IRXF@FWT Modify received',ROUTCDE=11
         L     R4,COMAREA                   -> Comm Area
         LA    R6,4(,R4)                    -> CIB Address
         L     R5,0(,R6)                    -> CIB
         LTR   R5,R5                        Is CIB address present ?
         BNZ   CHECKCIB                     Yes, go check it
*     WTO 'Internal error: no CIB'
         ABEND 1,DUMP                       No Cib, Scream and shout !
         SPACE
CHECKCIB DS    0H
         USING CIB,R5
         CLI   CIBVERB,CIBMODFY             Is this a modify command ?
         BE    MODIFY                       Yes, Go Process
         SPACE 1
*---------------------------------------------------------------------
*  Stop command issued - acknowledge and exit
*---------------------------------------------------------------------
         SPACE 1
*     WTO 'IRXF@FWT Stop command accepted',ROUTCDE=11
         LA    R6,4                         Message to display
         ST    R6,CMDLEN
         MVC   COMMAND(4),=C'STOP'          Store text
         B     MODEND
*---------------------------------------------------------------------
*  Modify Command Issued - Process and delete CIB
*---------------------------------------------------------------------
         SPACE 1
MODIFY   DS    0H
         LH    R7,CIBDATLN                  Get length of data
         ST    R7,CMDLEN                    store
         BCTR  R7,0                         -1 for execute
         EX    R7,MVCOPER                   Isolate Command
         OC    COMMAND,BLANKS               Make it upper case
*---------------------------------------------------------------------
*  Delete the CIB (note this clears the ECB if it is the last CIB)
*                 (which it is because we set CIBCTR=1           )
*---------------------------------------------------------------------
MODEND   DS    0H
         L     R5,COMAREA
         LA    R6,4(,R4)                    -> Address of CIB
         L     R5,0(,R6)                    Get CIB address
         QEDIT ORIGIN=(R6),BLOCK=(R5)       Delete the modify CIB
         B     RESULT
*---------------------------------------------------------------------
*  Process timer expiration:
*---------------------------------------------------------------------
PRCTIMER SR    R6,R6                        Empty reply
         ST    R6,CMDLEN
*     WTO 'IRXF@FWT Timer interval expired',ROUTCDE=11
         B     RESULT
*---------------------------------------------------------------------
*  Return Result
*---------------------------------------------------------------------
RESULT   L     R4,CMDLEN
         ST    R4,EVALBLOCK_EVLEN      Store Result length =1
         LTR   R4,R4
         BZ    NOTEXT
         BCTR  R4,R0                   length - 1 for EX MVC
         EX    R4,MVCCMD
NOTEXT   B     EXIT
*---------------------------------------------------------------------
*  No/invalid parm specified:
*---------------------------------------------------------------------
ERROR    SR    R15,R15
         ST    R15,CMDLEN
         LA    R15,ERRC
         ST    R15,RC
         B     RESULT
*---------------------------------------------------------------------
*  Initialize job for Modify commands, store common address:
*---------------------------------------------------------------------
TINIT    DS    0H
         LA    R5,4                         result length
         ST    R5,CMDLEN                    store result length
         LA    R4,COMAREA
         XC    EXTR(EXTRL),EXTR             clear
*     WTO 'Before EXTRACT',ROUTCDE=11
         EXTRACT (R4),FIELDS=(COMM),MF=(E,EXTR)
*     WTO 'After  EXTRACT',ROUTCDE=11
*not rent EXTRACT (R4),FIELDS=(COMM)         Get address of Comm Area
         L     R4,COMAREA                   Load it
         ST    R4,COMMAND                   Put in result
         L     R5,0(R4)                     Get Stop/Modify ECB address
         ST    R5,ECBA1                     Store in ECB list
         LA    R6,4(,R4)                    -> Address of CIB
         L     R5,0(,R6)                    Get CIB address
         LTR   R5,R5                        Is there a Start CIB ?
         BZ    NOCIB                        no, skip delete
         SPACE
         QEDIT ORIGIN=(R6),BLOCK=(R5)       Delete the start CIB
         SPACE 1
NOCIB    DS    0H
* Issue QEDIT to allow modify to be issued against this job. The
* CIBCTR value specifies how many modifies can be outstanding before
* the message 'modify rejected, task busy' is issued. If this program
* is to be driven by automation, the value of 1 should perhaps be
* increased a tad
         QEDIT ORIGIN=(R6),CIBCTR=1         Allow Modify to be issued
         BR    R14
*        B     RESULT
*
*=====================================================================
*        S U B R O U T I N E S
*---------------------------------------------------------------------
* GET input parameter (addr,length) by number:
*    entry :  R2=parm # (not changed)
*    use   :  R15 (return 0, when parm is found)
*    return:  to R14, R3=parm addr, R4=parm length (0, if not found)
*---------------------------------------------------------------------
GETPARM  DS    0H
         LR    R15,R2
         SR    R4,R4                   make length zero
         L     R3,EFPLARG              A(1st parm)
         B     GETPL1                  go into loop
GETPL    LA    R3,8(R3)                next parm
GETPL1   CLC   0(8,R3),PARMEND
         BER   R14                     not found
         BCT   R15,GETPL
* parm found:
         L     R4,4(R3)                parm length
         L     R3,0(R3)                parm addr
         BR    R14
*---------------------------------------------------------------------
*  Convert interval to binary:
*    entry :  R3=parm address, R4=parm length xxxxm or xxxxs
*    use   :  R15 (return 1, when parm is invalid)
*    result:  set INTERVAL in 0.01 second units
*---------------------------------------------------------------------
GETINTVL DS    0H
         STM   R1,R14,SAVE14
         LR    R5,R4
         BCTR  R5,R0                   length of number
* save units char:
         IC    R6,0(R5,R3)             units char
         STC   R6,INTUNIT              save units
* check length:
         LA    R6,1
         CR    R5,R6
         BL    GETERR                  length < 1
         LA    R6,4
         CR    R5,R6
         BH    GETERR                  length > 4
* convert number to binary:
         SR    R6,R5                   offset = 4 - length
         LA    R7,D+4
         LA    R7,0(R6,R7)             R7 = target = D + 4 + offset
         BCTR  R5,R0                   R5 = length - 1
         LA    R6,0(R5,R3)             last digit
         NI    0(6),X'CF'              set sign (F4 -> C4)
         XC    D,D                     clear D
         EX    R5,MVCPAR2              copy num to D+4
         LA    R6,D+4
         PACK  0(4,R6),0(4,R6)         convert to packed dec
         CVB   R6,D                    convert to binary
         ST    R6,INTERVAL             store
* process units:
         OI    INTUNIT,X'40'           convert to Upper case
         CLI   INTUNIT,C'S'
         BE    GETSECS
         LA    R7,60                   convert minutes to seconds
         M     R6,INTERVAL             R7 = 60 * INTERVAL
         ST    R7,INTERVAL
GETSECS  LA    R7,100                  conbert to 0.01 secs
         M     R6,INTERVAL
         ST    R7,INTERVAL
         B     GETNORM
GETERR   LA    R15,1
         B     GETRET
GETNORM  SR    R15,R15
GETRET   LM    R1,R14,SAVE14
         BR    R14
*=====================================================================
*        CONSTANTS
*---------------------------------------------------------------------
         DS    0F
PARMEND  DC    8X'FF'
MVCOPER  MVC   COMMAND(0),CIBDATA
MVCPAR2  MVC   0(0,R7),0(R3)
MVCCMD   MVC   EVALBLOCK_EVDATA,COMMAND
BLANKS   DC    CL80' '
ERRC     EQU   1
         LTORG
         EJECT
*=====================================================================
*  Stimer exit - post mainline
*  (Not reentrant because of TIMECB. It must be abs address)
*---------------------------------------------------------------------
         DROP  R12
TIMEXIT  DS    0H
         STM   14,12,12(13)            Save Registers
         LR    R12,R15
         USING TIMEXIT,R12
SAVAREA  WORK  LV=SAVAREAL
         LA    R1,SADDR
         CALL  SVMLOAD                R15 = addr of module
         LTR   R8,R15                 R8 = addr of data module
         BZ    TEXIT
         USING SVM00000,R8
         LA    R2,TIMECB                    Load ECB address
         POST  (R2)                         Post mainline
*     WTO 'POST done...',ROUTCDE=11
         SPACE
TEXIT    FIN
*TEXIT    L     R13,4(R13)                   Restore sav area
*         LM    R14,R12,12(R13)              Restore registers
*         BR    R14                          Get out of this place
*TIMECB   DS    F                            Timer ECB
SADDR    DC    A(SLEN)
SLEN     DC    AL2(8)
SNAME    DC    C'SVM00000'                  Data module
         LTORG
SAVAREA  DSECT
         DS    18F
SAVAREAL EQU   (*-SAVAREA+7)/8*8
*
*=====================================================================
*        DSECTS
*---------------------------------------------------------------------
SVM00000 SVM00000 DSECT=YES
         PUSH  PRINT
         PRINT NOGEN
         YREGS
CIB      DSECT
         IEZCIB
         CVT   DSECT=YES
         IHAASCB
         IHAASVT
*---------------------------------------------------------------------
* REXX specific DSECTs:
*---------------------------------------------------------------------
         IRXEFPL DSECT=YES             REXX parameter list
         IRXEVALB                      REXX evaluation block EVALBLOCK
         IRXEXTE                       REXX vector of external ep
         IRXENVB                       REXX environment block ENVBLOCK
         POP   PRINT
         END
//*
//LKED    EXEC PGM=HEWLKED,PARM='CALL,RENT,MAP,AC=1,RMOD=ANY,AMOD=31',
//        COND=(8,LE)
//SYSLIB   DD DISP=SHR,DSN=SYS3.UTILITY.LOADLIB.TEST
//SYSLMOD  DD DISP=SHR,DSN=SYS3.UTILITY.LOADLIB.TEST(IRXF@FWT) <=*.LOAD    03510
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD DSN=*.ASMH.SYSLIN,DISP=(OLD,PASS)
//*
//* HOW TO RUN TEST:
//*
//* When on GO, issue
//*   F SVM,OPERATOR
//* then
//*   P SVM
//* then wait 10 seconds for termination
//* Joblog must contain:
//*   +Reply from IRXF@FWT: OPERATOR
//*   +Reply from IRXF@FWT: STOP
//*   +Reply from IRXF@FWT:
//* SYSTSPRT must end with:
//* IRX0040I Error running PW, line XXX: Incorrect call to routine
//*
//*O      EXEC PGM=IKJEFT1B,COND=(8,LE),
//*       PARM='%PW'
//GO      EXEC PGM=IRXJCL,COND=(8,LE),
//        PARM='PW'
//SYSEXEC  DD DISP=SHR,DSN=SYS3.UTILITY.EXEC.SHARE         <== hlq.EXEC
//STEPLIB  DD DISP=SHR,DSN=SYS3.UTILITY.LOADLIB.TEST       <== hlq.LOAD
//         DD DISP=SHR,DSN=SYS3.UTILITY.LINKLIB.TEST    <== IRXFLOC lib
//SYSTSPRT DD SYSOUT=*
//SYSTSIN  DD DUMMY
//TEMPL    DD *
 Call L_WTO('Issue "F jobname,OPERATOR"')
 repl = IRXF@FWT('60s')
 call L_WTO('Reply from IRXF@FWT:' repl)
 Call L_WTO('Issue "P jobname"')
 repl = IRXF@FWT('60s')
 call L_WTO('Reply from IRXF@FWT:' repl)
 Call L_WTO('Now wait 5 s')
 repl = IRXF@FWT('5s')
 call L_WTO('Reply from IRXF@FWT:' repl)
 Say 'Invalid call to L_FWT:'
 repl = IRXF@FWT('123456')
 EXIT
