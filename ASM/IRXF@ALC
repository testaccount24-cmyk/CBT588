//jobname JOB (account),userid,CLASS=S,MSGCLASS=Y,REGION=4M
//*
//* First modify JOB card and data set names to your environment
//* Assemble and Link program/module
//*
//ASMH EXEC PGM=ASMA90,REGION=4M,
// PARM='RENT,OBJECT,NODECK,NOXREF,BATCH'
//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB
//         DD DISP=SHR,DSN=SYS1.MODGEN
//         DD DISP=SHR,DSN=SYS3.UTILITY.MACLIB.TEST      <== hlq.MACLIB
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200
//SYSIN    DD *
*---------------------------------------------------------------------
     TITLE 'IRXF@ALC REXX function L_ALC and L_FRE'
*---------------------------------------------------------------------
* History of Changes (last comes first):
*
* 07-10-2003 SVM Added WTP if IRXSAY not available (in OPS)
* 03-03-2002 SVM Created
*.....................................................................
*
* FUNCTION:     Same as
*               "TSO ALLOC DA('"dsn"') FI('"ddn"') VOLUME('"vol"') SHR"
*               Can be used outside TSO environment.
*
* SAMPLE USE:   dsn = 'MY.DATA.SET(MEMBER)'
*               If L_ALC(ddname,dsname)
*               Then Do
*                  /* process ddname */
*                  Call L_FRE(ddname)
*               End
*               Else Say 'Error opening data set'
*
* Parameters:   ddn,dsn,vol
*               ddn - required, specifies to what ddname allocate
*                     the dataset.
*               dsn - required, full dataset name to be allocated.
*                     Can include PDS member name.
*                     No apostrophes allowed.
*                     No HLQ will be added to the dsn.
*               vol - optional. If omitted, will locate by a catalog.
*               Dataset will be allocated with DISP=SHR.
*
* Return:       If error:
*                    Say error/warning message,
*               n/a: R15>0 - "Incorrect call to procedure"
*                    result = '0' datatset was not allocated
*               If allocated,
*                    result = '1' normal execution response
*
* Attributes:   Reus, reentrant, AMODE=31,RMODE=ANY
*
* Externals:    SVMALC6 (used by LOAD and CALL)
*--------------------------------------------------------------------
WRK      DSECT
         DS    18F
SVMPAR6  DS    0F
         SVMPAR6
TLEN     EQU   *-SVMPAR6
RETC     DS    F
ENVBLKA  DS    A
DSNLEN   DS    H
LTDSN    EQU   L'TDSN
DDNLEN   DS    H
LTDDN    EQU   L'TDDN
VOLLEN   DS    H
LTVOL    EQU   L'TVOL
EPADDR   DS    A
MSGLEN   DS    H                       For WTP
MSG      DS    CL40                    MSG length must be ERRMSGL
* parm for IRXSAY:
A1       DS    A
A2       DS    A
A3       DS    A
A4       DS    A
A5       DS    A
P1       DS    CL8                     function requested
P2       DS    A                       addr os data
P3       DS    F                       length of data
P4       DS    A                   IRXENVB optional, R0 is alternative
P5       DS    A                       RC and VL bit
WRKL     EQU   (*-WRK+7)/8*8           WORK AREA LENGTH, words
         REGS
*--------------------------------------------------------------------
IRXF@ALC BEGIN A=31
         SR    R6,R6                   indicate L_ALC
         B     COMMON
         ENTRY IRXF@FRE
OFFSET   EQU   *-IRXF@ALC
IRXF@FRE SAVE  (14,12)
         LA    R6,4                    indicate L_FREE
         LA    R3,OFFSET
         LR    R12,R15
         SR    R12,R3                  set base to IRXF@LOC
*
COMMON   DS    0H                      common continuation
WRK      WORK  LV=WRKL,LOC=BELOW
         B     START
*
FIN      L     R3,EPADDR
         LTR   R3,R3
         BZ    FIN0
         DELETE EP=SVMALC6
         LTR   R15,R15
         BZ    FIN0
FIN0     SR    R15,R15
**       L     R15,RETC
         FIN
*--------------------
* REGISTER EQUATES:
* R6  -> entry type (0 = L_ALC, else - L_FREE
* R9  -> EVALBLOCK result block
* R10 -> IRXEFPL   parm block
* R11 -> ENVBLOCK  environment block
*--------------------------------------------------------------------
*- Set REXX environment:
START    DS    0H
         ST    R0,ENVBLKA              save it
         LR    R10,R1                  IRXEFPL
         USING EFPL,R10                - parm list
         LR    R11,R0                  ENVBLOCK
         USING ENVBLOCK,R11            - externals
         L     R9,EFPLEVAL
         L     R9,0(R9)                EVALBLOCK
         USING EVALBLOCK,R9            - result
*        LA    R8,SHVBLK
*        USING SHVBLOCK,R8             - to set variables
*        BAL   R14,SETSHV
* Set response = 1 (as a default)
         MVI   EVALBLOCK_EVDATA,C'1'   return 1
         LA    R7,1
         ST    R7,EVALBLOCK_EVLEN
         SR    R7,R7
         ST    R7,EPADDR               clear
         ST    R7,RETC                 clear
         XC    SVMPAR6(TLEN),SVMPAR6   clear
         MVC   TDDN(LTDDN),#BLANKS     clear
         MVC   TDSN(LTDSN),#BLANKS     Clear
         MVC   TVOL(LTVOL),#BLANKS     Clear
*--------------------------------------------------------------------
* Read parameter 1 (ddname), if no - error
*--------------------------------------------------------------------
*      WTO 'Reading ddname...',ROUTCDE=11
         LA    R2,1
         BAL   R14,GETPARM             R3=addr, R4=length
         LA    R5,#ERR12
         LTR   R4,R4
         BZ    ERROR                   no ddn passed
         C     R4,LLTDDN
         BH    ERROR                   too long
         STH   R4,DDNLEN               save ddn length
         BCTR  R4,R0
         EX    R4,#MOVDDN              copy ddn
*
         LTR   R6,R6
         BNZ   PROCESS
*--------------------------------------------------------------------
*  Read parameter 2 (dsname), if no - error
*--------------------------------------------------------------------
*      WTO 'Reading dsname...',ROUTCDE=11
         LA    R2,2
         BAL   R14,GETPARM             R3=addr, R4=length
         LA    R5,#ERR11
         LTR   R4,R4
         BZ    ERROR                   no dsn passed
         C     R4,LLTDSN
         BH    ERROR                   too long
         STH   R4,DSNLEN               save dsn length
         MVC   TDSN(LTDSN),#BLANKS
         BCTR  R4,R0
         EX    R4,#MOVDSN              copy dsn
*--------------------------------------------------------------------
* Read parameter 3 (volume), if no - pass blanks
*--------------------------------------------------------------------
*      WTO 'Reading volume...',ROUTCDE=11
         SR    R4,R4
         ST    R4,VOLLEN               set to 0
         LA    R2,3
         BAL   R14,GETPARM             R3=addr, R4=length
         LA    R5,#ERR13
         LTR   R4,R4
         BZ    PROCESS                 no vol passed
         C     R4,LLTVOL
         BH    ERROR                   too long
         STH   R4,VOLLEN               save vol length
         BCTR  R4,R0
         EX    R4,#MOVVOL              copy vol
*
PROCESS  DS    0H
*      WTO 'Loading SVMALC6...',ROUTCDE=11
         LOAD  EP=SVMALC6,ERRET=LOADERR
         ST    R0,EPADDR
         LR    R1,R0
         LTR   R6,R6
         BZ    CONT2
         LA    R1,DELOFFS(R1)
         ST    R1,EPADDR
CONT2    LA    R1,SVMPAR6              store SVMDEL6
**       CALL  SVMALC6 or SVMDEL1
         L     R15,EPADDR
         BASSM R14,R15
         LTR   R15,R15
         LA    R5,#ERR3
         BNZ   ERROR
*  Call successful:
         B     EXIT
*--------------------------------------------------------------------
* EXIT:
*--------------------------------------------------------------------
* Normal exit:
EXIT     DS    0H
*      WTO 'Normal end...',ROUTCDE=11
         B     FIN
*
* Error exit:
LOADERR  DS    0H
         LA    R5,#ERR2                Load error
ERROR    DS    0H
*      WTO 'Error...',ROUTCDE=11
         USING ERRBLK,R5
         MVC   RETC(4),ERRCODE
         MVC   MSG(ERRMSGL),ERRMSG
         LTR   R6,R6
         BZ    ERROR1
         MVC   MSG(L'#PREFIX),#PREFIX  change prefix to L_FRE
* make parm for IRXSAY:
ERROR1   MVC   P1(8),=CL8'WRITE'       function request
         LA    R1,MSG
         ST    R1,P2                   string addr
         LA    R1,ERRMSGL
         ST    R1,P3                   string length
         ST    R11,P4                  ENVBLOCK
         XC    P5(4),P5                clear RC
         DROP  R5
* make addr list:
         LA    R1,P1
         ST    R1,A1
         LA    R1,P2
         ST    R1,A2
         LA    R1,P3
         ST    R1,A3
         LA    R1,P4
         ST    R1,A4
         LA    R1,P5
         ST    R1,A5
         OI    A5,X'80'                set VL bit
* call program:
         LA    R1,A1                   parm list addr
         L     R15,ENVBLOCK_IRXEXTE    addr IRXEXTE
         USING IRXEXTE,R15
         L     R15,IRXSAY              addr IRXSAY
         DROP  R15
         LTR   R15,R15
         BZ    NOSAY
         BALR  R14,R15                 Call IRXSAY
         B     RESPOND
* WTP message instead of Saying:
NOSAY    LA    R1,MSGLEN
         ST    R1,A1
         OI    A1,X'80'
         LA    R1,ERRMSGL
         STH   R1,MSGLEN
         LA    R1,A1
         CALL  WTP
*
* Set Response to '0':
RESPOND  MVI   EVALBLOCK_EVDATA,C'0'   return 1
         LA    R1,1
         ST    R1,EVALBLOCK_EVLEN
         B     FIN
*--------------------------------------------------------------------
*  Subroutines:
*---------------------------------------------------------------------*
* GET input parameter (addr,length) by number:                        *
*    entry :  R2=parm # (not changed)                                 *
*    use   :  R15 (return 0, when parm is found)                      *
*    return:  to R14, R3=parm addr, R4=parm length (0, if not found)  *
*---------------------------------------------------------------------*
GETPARM  DS    0H
         LR    R15,R2
         SR    R4,R4                   make length zero
         L     R3,EFPLARG              A(1st parm)
         B     GETPL1                  go into loop
GETPL    LA    R3,8(R3)                next parm
GETPL1   CLC   0(8,R3),PARMEND
         BER   R14                     not found
         BCT   R15,GETPL
* parm found:
         L     R4,4(R3)                parm length
         L     R3,0(R3)                parm addr
         BR    R14
*--------------------------------------------------------------------
*  Constants:
*
#PREFIX  DC    C'L_FRE:'
DELOFFS  EQU   40                      Offset for EP=SVMDEL6
LLTDSN   DC    A(LTDSN)
LLTDDN   DC    A(LTDDN)
LLTVOL   DC    A(LTVOL)
PARMEND  DC    8X'FF'
#MOVDSN  MVC   TDSN(0),0(R3)
#MOVDDN  MVC   TDDN(0),0(R3)
#MOVVOL  MVC   TVOL(0),0(R3)
#BLANKS  DC    CL54' '
*  Error messages: MSG length must be ERRMSGL
#ERR11   DC    F'12'                   No parm
         DC    CL40'L_ALC: Error - DSNAME missing/invalid  '
#ERR12   DC    F'12'                   No parm
         DC    CL40'L_ALC: Error - DDNAME missing/invalid  '
#ERR13   DC    F'12'                   No parm
         DC    CL40'L_ALC: Error - VOLUME serial invalid   '
#ERR2    DC    F'12'                   No SVMALC6
         DC    CL40'L_ALC: Error - SVMALC6 cannot be LOADed'
#ERR3    DC    F'00'                   Dynalloc failed
         DC    CL40'L_ALC: Warning - DYNALLOC failed       '
         LTORG
*--------------------------------------------------------------------
* Mapping:
*--------------------------------------------------------------------
ERRBLK   DSECT
ERRCODE  DS    F
ERRMSG   DS    CL40
ERRMSGL  EQU   *-ERRMSG
         IRXEFPL DSECT=YES             REXX parameter list
         IRXEVALB                      REXX evaluation block EVALBLOCK
         IRXEXTE                       REXX vector of external ep
         IRXENVB                       REXX environment block ENVBLOCK
         END   IRXF@ALC
//*
//LKED    EXEC PGM=HEWLKED,
//        PARM='RENT,CALL,MAP,AC=1,RMOD=ANY,AMOD=31',
//        COND=(8,LE)
//SYSLIB   DD DISP=SHR,DSN=SYS3.UTILITY.LOADLIB.TEST       <== hlq.LOAD
//SYSLMOD  DD DISP=SHR,DSN=SYS3.UTILITY.LOADLIB.TEST       <== hlq.LOAD
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD DSN=*.ASMH.SYSLIN,DISP=(OLD,PASS)
//         DD  *
     ALIAS IRXF@FRE
     NAME  IRXF@ALC(R)
//*
//* test changes, if any:
//*O      EXEC PGM=IKJEFT1B,COND=(8,LE),
//*       PARM='%PW'
//GO      EXEC PGM=IRXJCL,COND=(8,LE),
//        PARM='PW'
//SYSEXEC  DD DSN=SYS3.UTILITY.EXEC.SHARE,DISP=SHR   <== hlq.EXEC
//STEPLIB  DD DISP=SHR,DSN=SYS3.UTILITY.LOADLIB.TEST       <== hlq.LOAD
//         DD DISP=SHR,DSN=SYS3.UTILITY.LINKLIB      <== IRXFLOC lib
//SYSTSPRT DD  SYSOUT=*
//SYSTSIN  DD  DUMMY
//ABNLIGNR DD DUMMY
//SYSUDUMP DD SYSOUT=*
//SNAP     DD SYSOUT=*
//TEMPL    DD *
 ifile = 'TESTDD'
 idsn = 'SYS3.UTILITY.PS.TEST'
 ivol='RAMC15'
 x = IRXF@ALC()
    Say 'IRXF@ALC() response =' x
 x = IRXF@ALC(idsn)
    Say 'IRXF@ALC(longddn) response =' x
 x = IRXF@ALC(ifile,idsn||idsn||idsn||idsn)
    Say 'IRXF@ALC(ifile,longdsn) response =' x
 x = IRXF@ALC(ifile,idsn,ivol)
    Say 'IRXF@ALC(correct) response =' x
    "EXECIO * DISKR" ifile "(STEM inrec. FINIS"
    Say inrec.0 'records read from' ifile
    Do i = 1 To inrec.0
    /* Say inrec.i */
       End
    x = IRXF@FRE()
    Say 'IRXF@FRE() response =' x
    x = IRXF@FRE(ifile)
    Say 'IRXF@FRE(ifile) response =' x
 idsn='SYS3.UTILITY.MACLIB.TEST(SVMPAR6)'
 x = IRXF@ALC(ifile,idsn)
    Say 'IRXF@ALC(dsn(mem)) response =' x
    "EXECIO * DISKR" ifile "(STEM inrec. FINIS"
    Say inrec.0 'records read from' ifile
    Do i = 1 To inrec.0
    /* Say inrec.i */
       End
    x = IRXF@FRE(ifile)
    Say 'IRXF@FRE(ifile) response =' x
 EXIT
