//jobname JOB (account),userid,CLASS=S,MSGCLASS=Y,REGION=4M
//*
//* First modify JOB card and data set names to your environment
//* Assemble and Link program/module
//*
//* ASSEMBLE AND LINK PROGRAM
//ASMH EXEC PGM=ASMA90,REGION=4M,
// PARM='RENT,OBJECT,NODECK,NOXREF,BATCH'
//SYSLIB   DD DISP=SHR,DSN=SYS3.UTILITY.MACLIB.TEST      <== hlq.MACLIB
//         DD DISP=SHR,DSN=SYS1.MACLIB
//         DD DISP=SHR,DSN=SYS1.MODGEN
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200
//SYSIN    DD *
*---------------------------------------------------------------------
     TITLE 'IRXF@DSN REXX function L_DSN'
*---------------------------------------------------------------------
* History of Changes (last comes first):
*
* 07-10-2003 SVM Added WTP if IRXSAY not available (in OPS)
* 05-20-2003 SVM Added SYSMEMBER (cleared to '')
*            and GDG support
* 04-24-2003 SVM Added Say error msg
* 02-27-2003 SVM Fixed SWAREQ call -> LOSEPAX=YES
*                    Added limited processing for non-dasd
* 01-03-2003 SVM Created using SVM0026 (old LISTDSN)
*.....................................................................
*
* FUNCTION:     Create a limited number of LISTDSI variables.
*               Dsname is located by catalog.                            0000007
*               Variables that have no data will be cleared to null.
*               (See TSO/E REXX Reference. TSO/E External functions
*               for the variables names).
*               SYSRACFA is assigned RACF access available for the       0000011
*               owner of the job/task executing this function.
*               SYSUTYPE is assigned to unit type (DISK, TAPE).
*               SYSDDNAME is assigned if dsname is allocated.
*               Works outside TSO environment.
*               Works with either disk and/or tape datasets.
*
* Sample use:   If L_DSN(dsname) Then
*                  /* use returned variables */
*
* PARAMETERS:   dsname
*
* OUTPUT:       R15 = 0
*               Result = 1 - normal end
*               Result = 0 (all vars cleared)
*                  - no parm
*                  - dsname not located
*
* ATTRIBUTES:   REENTRANT, AMODE=31, RMODE=ANY
*
* EXTERNALS:    SVM0033 - shared with IRXF@DSN common module
*                         that sets up REXX variables
*               SVM0030 - return UNIT for Volume
*---------------------------------------------------------------------
         EJECT
*---------------------------------------------------------------------
.* Macro to help clear variable: &N is a name of var name constant
         MACRO
         STORE &N,&C=SHVSTORE
         AIF   ('&N' EQ '').NON
         LA    R1,&N
         ST    R1,SHVNAMA               --> store name addr
         LA    R1,L'&N
         ST    R1,SHVNAML               --> Store name length
         MVI   SHVCODE,&C               --> Set "store" code
         BAL   R14,CALLXCOM             - create variable
.NON     ANOP
         MEND
*
IRXF@DSN  BEGIN A=31,R=31                                                0000062
WRK      WORK  LV=WRKL,LOC=BELOW
         B     START
*
EXIT     SR    R15,R15
         FIN
*--------------------
* REGISTER EQUATES:
* R6  -> JFCB
* R7  -> TIOT entry
* R8  -> SHVBLOCK
* R9  -> EVALBLOCK result block
* R10 -> IRXEFPL   parm block
* R11 -> ENVBLOCK  environment block
*---------------------------------------------------------------------
*- Set REXX environment:
START    DS    0H
         ST    R0,ENVBLKA              save it
         LR    R10,R1                  IRXEFPL
         USING EFPL,R10                - parm list
         LR    R11,R0                  ENVBLOCK
         USING ENVBLOCK,R11            - externals
         L     R9,EFPLEVAL
         L     R9,0(R9)                EVALBLOCK
         USING EVALBLOCK,R9            - result
         LA    R8,SHVBLK
         USING SHVBLOCK,R8
         BAL   R14,SETSHV
         MVI   EVALBLOCK_EVDATA,C'1'   Store result value
         LA    R4,1
         ST    R4,EVALBLOCK_EVLEN      Store Result length
*---------------------------------------------------------------------*
*- Init all variables to '', drop SYSDDNAME:
*---------------------------------------------------------------------*
*        WTO   'Clearing Variables...',ROUTCDE=11
         BAL   R14,CLEAR
* get parm #1 (DSNAME)
         LA    R2,1
         BAL   R14,GETPARM             R3=addr,R4=length (0=not found)
         LA    R15,#ERR1
         LTR   R4,R4
         BZ    ERROR                   Error: no parm passed
         ST    R4,DSLEN
         BCTR  R4,0                    length - 1
         MVC   DSN(44),#BLANKS
         EX    R4,MVCDSN               === Store DSN ===
         XC    JFCBA(4),JFCBA          by default - not available
* locate volume by catalog and replace DSN by a real name for GDG:
*        WTO   'Locating VOLSER by catalog...',ROUTCDE=11
         LA    R1,DSN
         BAL   R14,LOCATE               === If R15=0, VOL is set ===
*---------------------------------------------------------------------*
*- locate 1st TIOT DD-entry and lookup (R5->EPA)
*---------------------------------------------------------------------*
SEARCHDD DS    0H
*        WTO   'Searching TIOT...',ROUTCDE=11
         XC    EPA,EPA
         L     R15,CVTPTR
         USING CVT,R15
         L     R15,CVTTCBP
         L     R15,PSATOLD-PSATNEW(R15)
         USING TCB,R15
         L     R15,TCBTIO
         USING TIOT1,R15
         LA    R15,TIOENTRY            1st DD-entry
         ST    R15,TIOE1               save it
         DROP  R15                      USING
*
*- search if DSNAME allocated in some TIOT DD:
         MVI   DDFOUND,C'N'            initiate DDFOUNG flag
         L     R7,TIOE1
DDLOOP   SR    R4,R4
         IC    R4,0(R7)                 DDentry length
         LTR   R4,R4                    If = 0
         BZ    NODDNAME                 DD not found
         CLI   4(R7),C' '               If not blank,
         BE    SKIPMVC
         MVC   DDNAME(8),4(R7)          === Store DDNAME ===
SKIPMVC  DS    0H
*  we might want to allow DDNAME+n here later...
*  Set up SWA for SWAREQ and locate JFCB:
         LA    R5,EPA                   GET ADDRESS OF THE EPA
         ST    R5,SWEPAPTR              INITIALIZE EPA POINTER
         USING ZB505,R5                 ESTABLISH ADDRESSABILITY TO EPA
         XC    SWAEPAX,SWAEPAX          INITIALIZE THE EPA
         MVC   SWVA,12(R7)              MV SVA OF JFCB INTO EPA
*
         SWAREQ FCODE=RL,EPA=SWEPAPTR,MF=(E,SWAPARMS),UNAUTH=YES
*
         L     R6,SWBLKPTR              POINT TO THE JFCB
         USING JFCB,R6                  ADDRESS JFCB
         CLC   DSN(44),JFCBDSNM         compare dsn
         BNE   NEXTDD                   Iterate
* Found DD referring DSN:
         DROP  R5                       USING
*        WTO   'DDNAME found',ROUTCDE=11
         MVI   DDFOUND,C'Y'
         ST    R6,JFCBA                 === Store JFCB address ===
         SR    R4,R4
         ICM   R4,7,17(R7)              R4 -> Tiot Unit addr
         DROP  R6                       USING
         USING UCBOB,R4
         MVC   UTYPE(4),UCBTYP          === Store UCBTYP ===
         MVC   VOL(6),UCBVOLI           === Store VOLSER ===
         CLC   UCBWGT+1(3),=C'UCB'      Check for 4-digit UNIT
         BE    FOURDGTS                 yes
         MVC   UNIT(4),UCBWGT           === Store UNIT ===
         MVI   UNIT,C'0'
         B     RDDN
*
FOURDGTS UNPK  D(5),UCBCHAN(3)          take 4-digit address
         MVC   UNIT(4),D                === store UNIT ===
         B     RDDN                     Exit loop
         DROP  R4                       USING
*
NEXTDD   LA    R7,0(R4,R7)              Advance to next TIOT DD entry
         B     DDLOOP
*
* DDNAME not found:
NODDNAME DS    0H
*        WTO   'DDNAME not found',ROUTCDE=11
         B     RDDN
*---------------------------------------------------------------------*
* Assign dataset variables:
*---------------------------------------------------------------------*
RDDN     DS    0H
*- process VOLUME: if DDNAME found, take from TIOT
*        WTO   'Processing VOLUME...',ROUTCDE=11
         CLI   DDFOUND,C'Y'
         BE    VFROMT
* locate volume by catalog:
*        WTO   'Locating VOLSER by catalog...',ROUTCDE=11
         LA    R1,DSN
         BAL   R14,LOCATE               === If R15=0, VOL is set ===
         LTR   R15,R15
         BZ    PRCVOL
* If DSN not found, set up SYSDSNAME variable and return error:
         LA    R3,DSN-1
         LA    R1,DSN+43
         LA    R2,1                    increment
         LNR   R2,R2                   -1
LOOP     CLI   0(R1),C' '
         BNE   LOOPE
         BXH   R1,R2,LOOP
*  R1-> blank or next char after DSN
LOOPE    SR    R1,R3                   length of DSNAME
         ST    R1,SHVVALL              --> store value length
         LA    R1,DSN
         ST    R1,SHVVALA              --> store value addr
         STORE #DSN
*        WTO   'Error in LOCATE...',ROUTCDE=11
         LA    R15,#ERR2
         B     ERROR                   error in LOCATE
* get VOL from TIOT -> UCB
VFROMT   DS    0H
*        WTO   'Locating VOLSER by TIOT...',ROUTCDE=11
*
PRCVOL   DS    0H
*---------------------------------------------------------------------*
*- process UNIT: If DDname found, R4 -> Unit entry
*                Else Locate unit by volume
*        WTO   'Processing UNIT...',ROUTCDE=11
         CLI   DDFOUND,C'Y'
         BE    UFROMT
* locate UNIT by volume:
*        WTO   'Locating UNIT by VOLSER...',ROUTCDE=11
         MVC   UNIT(4),=C'????'         == default UNIT ==
         MVI   UTYPE+2,X'80'            == default UTYPE=tape ==
         LA    R1,VOL
         ST    R1,A1
         LA    R1,UNIT
         ST    R1,A2
         LA    R1,UTYPE+2
         ST    R1,A3
         LA    R1,A1
         CALL  SVM0030                  Get Unit by VOLSER
UFROMT   DS    0H
*---------------------------------------------------------------------*
*- Call SVM0033 to set up variables:
         CLI   DDFOUND,C'Y'
         BE    SETDD
         MVC   DDNAME(8),#BLANKS
SETDD    DS    0H
         LA    R1,DDNAME
         ST    R1,P1
         LA    R1,DSN
         ST    R1,P2
         LA    R1,UNIT
         ST    R1,P3
         LA    R1,VOL
         ST    R1,P4
         LA    R1,UTYPE
         ST    R1,P5
         L     R1,JFCBA
         ST    R1,P6
         LA    R1,P1
         L     R0,ENVBLKA
         CALL  SVM0033
         B     EXIT                    normal end
*=====================================================================*
*        S U B R O U T I N E S                                        *
*---------------------------------------------------------------------*
* Clear (empty) all variables:
*---------------------------------------------------------------------*
CLEAR    ST    R14,SAV2R14
         LA    R3,DDNAME
         ST    R3,SHVVALA               --> store value addr
         SR    R1,R1                    set value length = 0
         ST    R1,SHVVALL               --> store value length
         STORE #DSN
         STORE #VOL
         STORE #UNIT
         STORE #DSORG
         STORE #RECFM
         STORE #LRECL
         STORE #BLKSI
         STORE #KEYLE
         STORE #UNITS
         STORE #PRIMA
         STORE #SECND
         STORE #DIRBA
         STORE #DIRBU
         STORE #MEMBS
         STORE #CRDT
         STORE #EXPDT
         STORE #REFD
         STORE #EXTEN
         STORE #PASSW
         STORE #RACF
         STORE #UPDAT
         STORE #UTYPE
         STORE #MEMNM
* Set SYSDDNAME:
         STORE #DDN,C=SHVDROPV          --> DROP SYSDDNAME
         L     R14,SAV2R14
         BR    R14
*---------------------------------------------------------------------*
* Set IRXEXCOM parameters:
*---------------------------------------------------------------------*
SETSHV   DS    0H
* (re)make addr list:
         LA    R1,#EXCOM
         ST    R1,A1                   A1 = Addr of module name
         XC    A2(8),A2                clear A2 and A3
         LA    R1,SHVBLK
         ST    R1,A4                   A4 -> SHVBLOCK
         OI    A4,X'80'                set VL bit
* (re)fill SHVBLOCK:
         XC    SHVNEXT(SHVBLEN),SHVNEXT clear it all
         BR    R14
*--------------------------------------------------------------------*
* Call IRXEXCOM:
*--------------------------------------------------------------------*
CALLXCOM ST    R14,SAVER14
         L     R15,ENVBLOCK_IRXEXTE    addr IRXEXTE
         USING IRXEXTE,R15
         L     R15,IRXEXCOM            addr IRXEXCOM
         DROP  R15                      USING
         LA    R1,A1                   parm list addr
         LR    R0,R11                  point to ENVBLOCK
         BALR  R14,R15                 Call IRXEXCOM
         ST    R15,SAVERC              save return code
         L     R14,SAVER14             restore return address
         BR    R14
* LOCATE VOLSER by DSName in catalog:                                 *
*    entry :  R1 = addr of 44-char DSNAME                             *
*    use   :  R15 (return 0, when VOLSER is located), R1 - work       *
*    return:  to R14, R15 = RC, set VOL                               *
*---------------------------------------------------------------------*
LOCATE   DS    0H
         ST    R14,SAVER14             save return
         MVC   VOL(6),#BLANKS          clear VOL
         MVC   WARE(LCAT),CATALOG
         ST    R1,WARE+4               parm 2 - DSN addr
         LA    R1,WACAT
         ST    R1,WARE+12              parm 4 - workarea
         LA    R1,WARE                 parm for LOCATE
         SVC   26                      LOCATE
         LTR   15,15
         BNZ   LOCATEX
         MVC   VOL(6),WACAT+6          Set VOL
LOCATEX  L     R14,SAVER14
         BR    R14
*---------------------------------------------------------------------*
* GET input parameter (addr,length) by number:                        *
*    entry :  R2=parm # (not changed)                                 *
*    use   :  R15 (return 0, when parm is found)                      *
*    return:  to R14, R3=parm addr, R4=parm length (0, if not found)  *
*---------------------------------------------------------------------*
GETPARM  DS    0H
         LR    R15,R2
         SR    R4,R4                   make length zero
         L     R3,EFPLARG              A(1st parm)
         B     GETPL1                  go into loop
GETPL    LA    R3,8(R3)                next parm
GETPL1   CLC   0(8,R3),PARMEND
         BER   R14                     not found
         BCT   R15,GETPL
* parm found:
         L     R4,4(R3)                parm length
         L     R3,0(R3)                parm addr
         BR    R14
*--------------------------------------------------------------------
* Error processing: Say message and return '0':
* R15 -> ERRBLK
ERROR    DS    0H
         USING ERRBLK,R15
*        MVC   RETC(4),ERRCODE
         MVC   MESSAGE(ERRMSGL),ERRMSG store for WTP
* make parm for IRXSAY:
         MVC   P1(8),=CL8'WRITE'       function request
         LA    R1,ERRMSG
         ST    R1,P3                   string addr
         LA    R1,ERRMSGL
         ST    R1,P4                   string length
         ST    R11,P5                  ENVBLOCK
*        XC    P5(4),P5                clear RC
* make addr list:
         LA    R1,P1
         ST    R1,A1
         LA    R1,P3
         ST    R1,A2
         LA    R1,P4
         ST    R1,A3
         LA    R1,P5
         ST    R1,A4
*        LA    R1,P5
*        ST    R1,A5
         OI    A4,X'80'                set VL bit
* call program:
         LA    R1,A1                   parm list addr
         L     R15,ENVBLOCK_IRXEXTE    addr IRXEXTE
         USING IRXEXTE,R15
         L     R15,IRXSAY              addr IRXSAY
         DROP  R15                      USING
         LTR   R15,R15
         BZ    NOSAY
         BALR  R14,R15                 Call IRXSAY
         B     ERRFIN
* WTP message instead of Saying:
NOSAY    LA    R1,MSGLEN
         ST    R1,A1
         OI    A1,X'80'
         LA    R1,ERRMSGL
         STH   R1,MSGLEN
         LA    R1,A1
         CALL  WTP
*
ERRFIN   MVI   EVALBLOCK_EVDATA,C'0'   Return '0'
         B     EXIT
*=====================================================================*
*        CONSTANTS                                                    *
*---------------------------------------------------------------------*
         DS    0F
PARMEND  DC    8X'FF'
MVCDSN   MVC   DSN(0),0(R3)                 move parm to DSNAME
MVCNN    MVC   0(0,R1),0(R6)                move parm to D
#EXCOM   DC    C'IRXEXCOM'                  REXX module name
#DSN     DC    C'SYSDSNAME'                 variable name
#DDN     DC    C'SYSDDNAME'                 variable name
#VOL     DC    C'SYSVOLUME'                 variable name
#UNIT    DC    C'SYSUNIT'                   variable name
#DSORG   DC    C'SYSDSORG'                  variable name
#RECFM   DC    C'SYSRECFM'                  variable name
#LRECL   DC    C'SYSLRECL'                  variable name
#BLKSI   DC    C'SYSBLKSIZE'                variable name
#KEYLE   DC    C'SYSKEYLEN'                 variable name
#UNITS   DC    C'SYSUNITS'                  variable name
#PRIMA   DC    C'SYSPRIMARY'                variable name
#SECND   DC    C'SYSSECONDS'                variable name
#DIRBA   DC    C'SYSADIRBLK'                variable name
#DIRBU   DC    C'SYSUDIRBLK'                variable name
#MEMBS   DC    C'SYSMEMBERS'                variable name
#CRDT    DC    C'SYSCREATE'                 variable name
#EXPDT   DC    C'SYSEXDATE'                 variable name
#REFD    DC    C'SYSREFDATE'                variable name
#EXTEN   DC    C'SYSEXTENTS'                variable name
#PASSW   DC    C'SYSPASSWORD'               variable name
#RACF    DC    C'SYSRACFA'                  variable name
#UPDAT   DC    C'SYSUPDATED'                variable name
#UTYPE   DC    C'SYSUTYPE'                  variable name (added)
#MEMNM   DC    C'SYSMEMBER'                 variable name (added)
#ZERO    DC    F'0'
#ZEROES  DC    C'00000000'
#BLANKS  DC    CL60' '
         DS    0F
CATALOG  CAMLST NAME,CATALOG,,CATALOG
LCAT     EQU   *-CATALOG
#ERR1    DC    F'12'                   No parm:
         DC    CL40'L_DSN: Error - no parm passed          '
#ERR2    DC    F'12'                   LOCATE error:
         DC    CL40'L_DSN: Dataset not found               '
         LTORG
         EJECT
ERRBLK   DSECT
ERRCODE  DS    F
ERRMSG   DS    CL40
ERRMSGL  EQU   *-ERRMSG
*---------------------------------------------------------------------*
*        LOCAL WORK AREA                                              *
*---------------------------------------------------------------------*
         SPACE 1
WRK      DSECT
WRKSAVE  DS    18F                     REGISTER SAVE AREA
WRKSAVE2 DS    18F                     REGISTER SAVE AREA
D        DS    D
TIOE1    DS F
SWEPAPTR DS F
SWAPARMS SWAREQ MF=L
EPA      DS    CL28                   EPA uses 26 bytes ...
DDNAME   DS    CL8
DSN      DS    CL44
DSLEN    DS    F
UNIT     DS    F
UTYPE    DS    F
VOL      DS    6C
WARE     CAMLST NAME,WARE,,WARE       space for parm
WACAT    DS    265C                   LOCATE work area
*- Function call parameter:
*- R0 -> env block IRXENVB
*- R1 -> following parameter list:
A1       DS    A
A2       DS    A
A3       DS    A
A4       DS    A
A5       DS    A
A6       DS    A
* parameter values:
SHVBLK   DS    8F'0'                   IRXSHVB instance
*- R1 -> following parameter list for SVM0028:
P1       DS    A
P2       DS    A
P3       DS    A
P4       DS    A
P5       DS    A
P6       DS    A
SAVERC   DS    F                       retcode from IRXEXCOM
SAVER14  DS    F                       save R14
SAV2R14  DS    F                       save R14
*LISTD    CAMLST SEARCH,JFCBDSNM,WVOL,W140
LISTD    DS    0F                      CAMLST
         DS    A                       = #LISTD
         DS    A                       (DSN)
         DS    A                       (VOL)
         DS    A                       (W140)
*
ENVBLKA  DS    A
JFCBA    DS    A
DDFOUND  DS    C
MSGLEN   DS    H                       For WTP
MESSAGE  DS    CL40                    For WTP
WRKL     EQU   (*-WRK+7)/8*8           WORK AREA LENGTH, words
         EJECT
*---------------------------------------------------------------------*
*        DSECTS                                                       *
*---------------------------------------------------------------------*
         PRINT NOGEN
         REGS
* REXX specific DSECTs:
         IRXEFPL DSECT=YES             REXX parameter list
         IRXEVALB                      REXX evaluation block EVALBLOCK
         IRXEXTE                       REXX vector of external ep
         IRXENVB                       REXX environment block ENVBLOCK
         IRXSHVB                       REXX shared variables block
* SYSTEM SPECIFIC DSECTS:
         CVT DSECT=YES
         IEFJESCT
         IEFZB505 LOCEPAX=YES
         IKJTCB  DSECT=YES
         IHAPSA
TIOT     DSECT
         IEFTIOT1
JFCB     DSECT
         IEFJFCBN
         IEFUCBOB                      UCB MACRO ID
         PRINT GEN
         END
//*
//LKED    EXEC PGM=HEWLKED,PARM='CALL,MAP,RENT,AC=1,RMOD=ANY,AMOD=31',
//        COND=(8,LE)
//SYSLIB   DD DISP=SHR,DSN=SYS3.UTILITY.LOADLIB.TEST       <== hlq.LOAD
//SYSLMOD  DD DISP=SHR,DSN=SYS3.UTILITY.LOADLIB.TEST(IRXF@DSN) <=*.LOAD  0351000
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD DSN=*.ASMH.SYSLIN,DISP=(OLD,PASS)
//*
//* Test changes, if any:
//*
//*TEP1   EXEC PGM=IKJEFT1B,
//*       PARM='%PW'
//STEP1   EXEC PGM=IRXJCL,COND=(8,LE),
//        PARM='PW'
//SYSEXEC  DD DISP=SHR,DSN=SYS3.UTILITY.EXEC.SHARE         <== hlq.EXEC
//*UNIT=DASD,VOL=SER=TSTTS1
//STEPLIB  DD DISP=SHR,DSN=SYS3.UTILITY.LOADLIB.TEST       <== hlq.LOAD
//*UNIT=DASD,VOL=SER=TSTTS1
//SYSTSPRT DD  SYSOUT=*
//SYSTSIN  DD  DUMMY
//SYSUDUMP DD  SYSOUT=*
//SNAP     DD  SYSOUT=*
//ABNLIGNR DD  DUMMY                                       <== Abenaid
//TESTDD   DD DISP=SHR,DSN=SYS3.UTILITY.LOADLIB.TEST
//         DD DISP=SHR,DSN=SYS1.LINKLIB
//*ESTDD   DD DISP=SHR,DSN=RESERVE3,UNIT=CART,LABEL=3,VOL=SER=FDR53T
//TEMPL    DD *
 dsn = 'SYS1.LINKLIB'
 result = IRXF@DSN()
 Say 'DSN=' 'Result=' result
 result = IRXF@DSN('XXXXXXXX')
 Say 'DSN=XXXXXXXX' 'Result=' result
 /* Test return of new GDG dsname: */
 result = IRXF@DSN('SYST.TESTGDG.PDF(+1)')
 Say "DSN='SYST.TESTGDG.PDF(+1)' Result=" result
 Say ' SYSDSNAME='   SYSDSNAME
 result = IRXF@DSN(dsn)
 Say 'DSN='dsn 'Result=' result
 Say ' SYSDSNAME='   SYSDSNAME
 Say ' SYSDDNAME='   SYSDDNAME
 Say ' SYSMEMBER='   SYSMEMBER
 Say ' SYSVOLUME='   SYSVOLUME
 Say ' SYSUNIT='     SYSUNIT
 Say ' SYSUTYPE='    SYSUTYPE
 Say ' SYSDSORG='    SYSDSORG
 Say ' SYSRECFM='    SYSRECFM
 Say ' SYSLRECL='    SYSLRECL
 Say ' SYSBLKSIZE='  SYSBLKSIZE
 Say ' SYSKEYLEN='   SYSKEYLEN
 Say ' SYSUNITS='    SYSUNITS
 Say ' SYSPRIMARY='  SYSPRIMARY
 Say ' SYSSECONDS='  SYSSECONDS
 Say ' SYSADIRBLK='  SYSADIRBLK
 Say ' SYSMEMBERS='  SYSMEMBERS
 Say ' SYSUDIRBLK='  SYSUDIRBLK
 Say ' SYSCREATE='   SYSCREATE
 Say ' SYSEXDATE='   SYSEXDATE
 Say ' SYSREFDATE='  SYSREFDATE
 Say ' SYSEXTENTS='  SYSEXTENTS
 Say ' SYSPASSWORD=' SYSPASSWORD
 Say ' SYSRACFA='    SYSRACFA
 Say ' SYSUPDATED='  SYSUPDATED
 EXIT
