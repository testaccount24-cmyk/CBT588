//jobname JOB (account),userid,CLASS=S,MSGCLASS=Y,REGION=4M
//*
//* First  modify JOB card and dataset names to your environment
//* Assemble and Link program/module
//*
//ASMH EXEC PGM=ASMA90,REGION=4M,
// PARM='RENT,OBJECT,NODECK,NOXREF,BATCH'
//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB
//         DD DISP=SHR,DSN=SYS1.MODGEN
//         DD DISP=SHR,DSN=SYS3.UTILITY.MACLIB.TEST      <== hlq.MACLIB
//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200
//SYSIN    DD *
*-------------------------------------------------------------------
     TITLE 'SVM0028  Module returns allocated/used dir blocks'
*-------------------------------------------------------------------
* History of Changes (last comes first):
*
* 03/05-2003 SVM Changed to LOAD and call $OPEN
* 12-19-2002 SVM Created using $TOPEN1
*.....................................................................
*
* FUNCTION:
*                    Open PO dataset, calculate total and used
*                    directory blocks and return in R15
* INPUT:
*                    Standard parm interface
*                        parm1 DS CL44 - dsnname
*                        parm2 DS CL6  - volume (might be blanks)
*
* OUTPUT:
*                        parm3 DS H - # of dir blocks
*                        parm4 DS H - # of used dir blocks
*                        parm5 DS H - # of members
* Attributes:
*                    reentrant, AMODE=31,RMODE=Any
* Externals:
*                    $OPEN - dynalloc interface module
*--------------------------------------------------------------------
SVM0028  BEGIN A=31
WRK      WORK    LV=WRKL,LOC=BELOW
         B       START
EXIT     L     R3,$OPENADR
         LTR   R3,R3
         BZ    FIN
         DELETE EP=$OPENI
         LTR   R15,R15
         BZ    FIN
**       WTO   'DELETE EP=$OPENI failed',ROUTCDE=11
FIN      FIN
*---------------------------------------------------------------------
*  Open Input Dataset to read directory:
START    LA    R15,$PARM
         ST    R15,$PADDR              Set $PADDR
         OI    $PADDR,X'80'            Set VL bit
         LM    R1,R5,0(R1)             Load parm addresses:
* R1->DSN, R2->VOL, R3->ablk, R4->ublk, R5->memb
         MVC   DSNAME(44),0(R1)
         MVC   VOLUME(6),0(R2)
         MVC   MEMBER(8),#BLANKS       Clear MEMBER to read Directory
         XC    RECLEN(NUMLEN),RECLEN   Nullify other fields
*        WTO   'TEST: Calling $OPENI...',ROUTCDE=11
         LOAD  EP=$OPENI
         ST    R0,$OPENADR
         LR    R1,R0
         LA    R0,$CLSOFFS(R1)
         ST    R0,$CLOSADR
         LA    R0,$REDOFFS(R1)
         ST    R0,$READADR
*
         LA    R1,$PADDR
*        CALL  $OPENI
         L     R15,$OPENADR
         BASSM R14,R15
         LTR   R15,R15
         BZ    TREAD0
*        WTO   'TEST: $OPEN failed',ROUTCDE=11
         SR    R15,R15
         B     EXIT
*  Read Input Dir blocks:
TREAD0   DS    0H
*        WTO   'TEST: Calling $READ loop...',ROUTCDE=11
         SR    R9,R9                   Dir block counter
         SR    R6,R6                   Used dir block counter
         SR    R7,R7                   Flag Last used found
         SR    R8,R8                   # of members
TREAD    LA    R1,$PADDR
*        CALL  $READ
         L     R15,$READADR
         BASSM R14,R15
         LTR   R15,R15
         BNZ   TCLOSE                  end of file
         LTR   R7,R7                   Check if unused block
         BNZ   CALC0                   unused block
* Read dir entries:
         L     R2,RECADDR
         LH    R1,0(R2)                blk length
         LA    R0,0(R1,R2)             next to last used byte
         LA    R2,2(R2)                1st entry
         USING ENTRY,R2
LOOP     SR    R1,R1
         ICM   R1,8,COUNTER
         SLL   R1,3                    use 5 bits
         SRL   R1,26                   length of DATA
         LA    R1,12(R1)               length of ENTRY
* process member ENTRY:
         CLC   NAME(8),#MAX
         BE    LAST
         LA    R8,1(R8)                # of members
         LA    R2,0(R1,R2)             next entry
         CR    R2,R0
         BNL   NOTLAST
         B     LOOP
*
LAST     LA    R7,1                    last: R7 > 0
*        WTO   'SVM0028: #MAX detected',ROUTCDE=11
NOTLAST  LA    R6,1(R6)                # of used blocks
CALC0    LA    R9,1(R9)                # of blocks
         B     TREAD
*
*  Close Input Dataset:
TCLOSE   DS    0H
         STH   R9,0(R3)                store ablk
         STH   R6,0(R4)                store ublk
         STH   R8,0(R5)                store memb
*        WTO   'TEST: Calling $CLOSE...',ROUTCDE=11
         LA    R1,$PADDR
*        CALL  $CLOSE
         L     R15,$OPENADR
         BASSM R14,R15
         LTR   R15,R15
         BNZ   CLSERR
         SR    R15,R15
         B     EXIT
CLSERR   DS    0H
*        WTO 'TEST: $CLOSE failed',ROUTCDE=11
*- Error EXIT:
EEXIT    DS    0H
         LA    R15,16
         B     EXIT
*-------------------
*  Constants:
*-------------------
#BLANKS  DC    CL8' '
#MAX     DC    8X'FF'
$CLSOFFS EQU   80                      X'50' offset of $CLOSE ep
$REDOFFS EQU   48                      X'30' offset of $READ ep
         LTORG
*-------------------
WRK      DSECT
S        DS    18F
RESULT   DS    F
$PADDR   DC    X'80'                   Std Parm addr list
         DC    AL3($PARM)              Actually AL4
*- $PARM map for $OPEN:
$PARM    DS    0F
RC       DC    F'0'                    <Return Code
DSNAME   DC    44C' '                  >Dataset Name
MEMBER   DC    8C' '                   >PDS Member Name/blanks
VOLUME   DC    6C' '                   >Volume Name/blanks
RECLEN   DC    H'0'                    <Current Record Length
TYPE     EQU   RECLEN
DCBAD    DC    F'0'                   ><DCB Address
BUFADDR  DC    F'0'                   ><Buffer Address
LENGTH   DC    F'0'                    <Data Length in Buffer (bytes)
RECADDR  DC    F'0'                    <Current Record Addr
NUMLEN   EQU   *-RECLEN
*- end of $PARM map
$OPENADR DS    A                       addr of $OPENI
$CLOSADR DS    A                       addr of $CLOSE
$READADR DS    A                       addr of $READ
WRKL     EQU   *-WRK
* PO directory entry map:
ENTRY    DSECT
NAME     DS    CL8
TTR      DS    XL3
COUNTER  DS    XL1
DATA     DS    XL1
*
SVM0028  CSECT
         YREGS
         END
//*
//LKED    EXEC PGM=HEWLKED,COND=(8,LE),
//        PARM='RENT,REUS,NCAL,MAP,AC=1,RMOD=ANY,AMOD=31'
//SYSLMOD  DD DISP=SHR,DSN=SYS3.UTILITY.LOADLIB.TEST(SVM0028) <= *.LOAD
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD DSN=*.ASMH.SYSLIN,DISP=(OLD,PASS)
//
//* Test with IRXF@DDN, IRXF@DSN
